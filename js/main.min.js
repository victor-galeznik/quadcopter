/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,(function(e,t){"use strict";var i=[],n=Object.getPrototypeOf,o=i.slice,s=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},r=i.push,a=i.indexOf,l={},c=l.toString,d=l.hasOwnProperty,u=d.toString,p=u.call(Object),h={},f=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},v=function(e){return null!=e&&e===e.window},g=e.document,m={type:!0,src:!0,nonce:!0,noModule:!0};function y(e,t,i){var n,o,s=(i=i||g).createElement("script");if(s.text=e,t)for(n in m)(o=t[n]||t.getAttribute&&t.getAttribute(n))&&s.setAttribute(n,o);i.head.appendChild(s).parentNode.removeChild(s)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var x=function(e,t){return new x.fn.init(e,t)};function b(e){var t=!!e&&"length"in e&&e.length,i=w(e);return!f(e)&&!v(e)&&("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:"3.6.0",constructor:x,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,(function(t,i){return e.call(t,i,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:r,sort:i.sort,splice:i.splice},x.extend=x.fn.extend=function(){var e,t,i,n,o,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||f(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(c&&n&&(x.isPlainObject(n)||(o=Array.isArray(n)))?(i=r[t],s=o&&!Array.isArray(i)?[]:o||x.isPlainObject(i)?i:{},o=!1,r[t]=x.extend(c,s,n)):void 0!==n&&(r[t]=n));return r},x.extend({expando:"jQuery"+("3.6.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==c.call(e))&&(!(t=n(e))||"function"==typeof(i=d.call(t,"constructor")&&t.constructor)&&u.call(i)===p)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,i){y(e,{nonce:t&&t.nonce},i)},each:function(e,t){var i,n=0;if(b(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},makeArray:function(e,t){var i=t||[];return null!=e&&(b(Object(e))?x.merge(i,"string"==typeof e?[e]:e):r.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:a.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,o=e.length;n<i;n++)e[o++]=t[n];return e.length=o,e},grep:function(e,t,i){for(var n=[],o=0,s=e.length,r=!i;o<s;o++)!t(e[o],o)!==r&&n.push(e[o]);return n},map:function(e,t,i){var n,o,r=0,a=[];if(b(e))for(n=e.length;r<n;r++)null!=(o=t(e[r],r,i))&&a.push(o);else for(r in e)null!=(o=t(e[r],r,i))&&a.push(o);return s(a)},guid:1,support:h}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=i[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){l["[object "+t+"]"]=t.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
function(e){var t,i,n,o,s,r,a,l,c,d,u,p,h,f,v,g,m,y,w,x="sizzle"+1*new Date,b=e.document,S=0,T=0,k=le(),C=le(),E=le(),A=le(),$=function(e,t){return e===t&&(u=!0),0},P={}.hasOwnProperty,H=[],D=H.pop,L=H.push,O=H.push,j=H.slice,M=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",z="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\["+z+"*("+q+")(?:"+z+"*([*^$|!~]?=)"+z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+z+"*\\]",X=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",W=new RegExp(z+"+","g"),_=new RegExp("^"+z+"+|((?:^|[^\\\\])(?:\\\\.)*)"+z+"+$","g"),Y=new RegExp("^"+z+"*,"+z+"*"),R=new RegExp("^"+z+"*([>+~]|"+z+")"+z+"*"),B=new RegExp(z+"|>"),F=new RegExp(X),U=new RegExp("^"+q+"$"),V={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+X),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+z+"*(even|odd|(([+-]|)(\\d*)n|)"+z+"*(?:([+-]|)"+z+"*(\\d+)|))"+z+"*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^"+z+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+z+"*((?:-\\d)?\\d*)"+z+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\([^\\r\\n\\f])","g"),ie=function(e,t){var i="0x"+e.slice(1)-65536;return t||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},ne=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=function(){p()},re=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(H=j.call(b.childNodes),b.childNodes),H[b.childNodes.length].nodeType}catch(e){O={apply:H.length?function(e,t){L.apply(e,j.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function ae(e,t,n,o){var s,a,c,d,u,f,m,y=t&&t.ownerDocument,b=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==b&&9!==b&&11!==b)return n;if(!o&&(p(t),t=t||h,v)){if(11!==b&&(u=Z.exec(e)))if(s=u[1]){if(9===b){if(!(c=t.getElementById(s)))return n;if(c.id===s)return n.push(c),n}else if(y&&(c=y.getElementById(s))&&w(t,c)&&c.id===s)return n.push(c),n}else{if(u[2])return O.apply(n,t.getElementsByTagName(e)),n;if((s=u[3])&&i.getElementsByClassName&&t.getElementsByClassName)return O.apply(n,t.getElementsByClassName(s)),n}if(i.qsa&&!A[e+" "]&&(!g||!g.test(e))&&(1!==b||"object"!==t.nodeName.toLowerCase())){if(m=e,y=t,1===b&&(B.test(e)||R.test(e))){for((y=ee.test(e)&&me(t.parentNode)||t)===t&&i.scope||((d=t.getAttribute("id"))?d=d.replace(ne,oe):t.setAttribute("id",d=x)),a=(f=r(e)).length;a--;)f[a]=(d?"#"+d:":scope")+" "+we(f[a]);m=f.join(",")}try{return O.apply(n,y.querySelectorAll(m)),n}catch(t){A(e,!0)}finally{d===x&&t.removeAttribute("id")}}}return l(e.replace(_,"$1"),t,n,o)}function le(){var e=[];return function t(i,o){return e.push(i+" ")>n.cacheLength&&delete t[e.shift()],t[i+" "]=o}}function ce(e){return e[x]=!0,e}function de(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var i=e.split("|"),o=i.length;o--;)n.attrHandle[i[o]]=t}function pe(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}function ve(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ce((function(t){return t=+t,ce((function(i,n){for(var o,s=e([],i.length,t),r=s.length;r--;)i[o=s[r]]&&(i[o]=!(n[o]=i[o]))}))}))}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in i=ae.support={},s=ae.isXML=function(e){var t=e&&e.namespaceURI,i=e&&(e.ownerDocument||e).documentElement;return!K.test(t||i&&i.nodeName||"HTML")},p=ae.setDocument=function(e){var t,o,r=e?e.ownerDocument||e:b;return r!=h&&9===r.nodeType&&r.documentElement?(f=(h=r).documentElement,v=!s(h),b!=h&&(o=h.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",se,!1):o.attachEvent&&o.attachEvent("onunload",se)),i.scope=de((function(e){return f.appendChild(e).appendChild(h.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),i.attributes=de((function(e){return e.className="i",!e.getAttribute("className")})),i.getElementsByTagName=de((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),i.getElementsByClassName=J.test(h.getElementsByClassName),i.getById=de((function(e){return f.appendChild(e).id=x,!h.getElementsByName||!h.getElementsByName(x).length})),i.getById?(n.filter.ID=function(e){var t=e.replace(te,ie);return function(e){return e.getAttribute("id")===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var i=t.getElementById(e);return i?[i]:[]}}):(n.filter.ID=function(e){var t=e.replace(te,ie);return function(e){var i=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var i,n,o,s=t.getElementById(e);if(s){if((i=s.getAttributeNode("id"))&&i.value===e)return[s];for(o=t.getElementsByName(e),n=0;s=o[n++];)if((i=s.getAttributeNode("id"))&&i.value===e)return[s]}return[]}}),n.find.TAG=i.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):i.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],o=0,s=t.getElementsByTagName(e);if("*"===e){for(;i=s[o++];)1===i.nodeType&&n.push(i);return n}return s},n.find.CLASS=i.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},m=[],g=[],(i.qsa=J.test(h.querySelectorAll))&&(de((function(e){var t;f.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+z+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+z+"*(?:value|"+N+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),(t=h.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+z+"*name"+z+"*="+z+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),de((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+z+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(i.matchesSelector=J.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&de((function(e){i.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),m.push("!=",X)})),g=g.length&&new RegExp(g.join("|")),m=m.length&&new RegExp(m.join("|")),t=J.test(f.compareDocumentPosition),w=t||J.test(f.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},$=t?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!i.sortDetached&&t.compareDocumentPosition(e)===n?e==h||e.ownerDocument==b&&w(b,e)?-1:t==h||t.ownerDocument==b&&w(b,t)?1:d?M(d,e)-M(d,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var i,n=0,o=e.parentNode,s=t.parentNode,r=[e],a=[t];if(!o||!s)return e==h?-1:t==h?1:o?-1:s?1:d?M(d,e)-M(d,t):0;if(o===s)return pe(e,t);for(i=e;i=i.parentNode;)r.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?pe(r[n],a[n]):r[n]==b?-1:a[n]==b?1:0},h):h},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(p(e),i.matchesSelector&&v&&!A[t+" "]&&(!m||!m.test(t))&&(!g||!g.test(t)))try{var n=y.call(e,t);if(n||i.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){A(t,!0)}return ae(t,h,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=h&&p(e),w(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=h&&p(e);var o=n.attrHandle[t.toLowerCase()],s=o&&P.call(n.attrHandle,t.toLowerCase())?o(e,t,!v):void 0;return void 0!==s?s:i.attributes||!v?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},ae.escape=function(e){return(e+"").replace(ne,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],o=0,s=0;if(u=!i.detectDuplicates,d=!i.sortStable&&e.slice(0),e.sort($),u){for(;t=e[s++];)t===e[s]&&(o=n.push(s));for(;o--;)e.splice(n[o],1)}return d=null,e},o=ae.getText=function(e){var t,i="",n=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=o(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[n++];)i+=o(t);return i},(n=ae.selectors={cacheLength:50,createPseudo:ce,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ie),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ie),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&F.test(i)&&(t=r(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ie).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+z+")"+e+"("+z+"|$)"))&&k(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,i){return function(n){var o=ae.attr(n,e);return null==o?"!="===t:!t||(o+="","="===t?o===i:"!="===t?o!==i:"^="===t?i&&0===o.indexOf(i):"*="===t?i&&o.indexOf(i)>-1:"$="===t?i&&o.slice(-i.length)===i:"~="===t?(" "+o.replace(W," ")+" ").indexOf(i)>-1:"|="===t&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,i,n,o){var s="nth"!==e.slice(0,3),r="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===o?function(e){return!!e.parentNode}:function(t,i,l){var c,d,u,p,h,f,v=s!==r?"nextSibling":"previousSibling",g=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(g){if(s){for(;v;){for(p=t;p=p[v];)if(a?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;f=v="only"===e&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(w=(h=(c=(d=(u=(p=g)[x]||(p[x]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]||[])[0]===S&&c[1])&&c[2],p=h&&g.childNodes[h];p=++h&&p&&p[v]||(w=h=0)||f.pop();)if(1===p.nodeType&&++w&&p===t){d[e]=[S,h,w];break}}else if(y&&(w=h=(c=(d=(u=(p=t)[x]||(p[x]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]||[])[0]===S&&c[1]),!1===w)for(;(p=++h&&p&&p[v]||(w=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++w||(y&&((d=(u=p[x]||(p[x]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]=[S,w]),p!==t)););return(w-=o)===n||w%n==0&&w/n>=0}}},PSEUDO:function(e,t){var i,o=n.pseudos[e]||n.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(i=[e,e,"",t],n.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,i){for(var n,s=o(e,t),r=s.length;r--;)e[n=M(e,s[r])]=!(i[n]=s[r])})):function(e){return o(e,0,i)}):o}},pseudos:{not:ce((function(e){var t=[],i=[],n=a(e.replace(_,"$1"));return n[x]?ce((function(e,t,i,o){for(var s,r=n(e,null,o,[]),a=e.length;a--;)(s=r[a])&&(e[a]=!(t[a]=s))})):function(e,o,s){return t[0]=e,n(t,null,s,i),t[0]=null,!i.pop()}})),has:ce((function(e){return function(t){return ae(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ie),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return U.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ie).toLowerCase(),function(t){var i;do{if(i=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(i=i.toLowerCase())===e||0===i.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!n.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,i){return[i<0?i+t:i]})),even:ge((function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e})),odd:ge((function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e})),lt:ge((function(e,t,i){for(var n=i<0?i+t:i>t?t:i;--n>=0;)e.push(n);return e})),gt:ge((function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=fe(t);function ye(){}function we(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function xe(e,t,i){var n=t.dir,o=t.next,s=o||n,r=i&&"parentNode"===s,a=T++;return t.first?function(t,i,o){for(;t=t[n];)if(1===t.nodeType||r)return e(t,i,o);return!1}:function(t,i,l){var c,d,u,p=[S,a];if(l){for(;t=t[n];)if((1===t.nodeType||r)&&e(t,i,l))return!0}else for(;t=t[n];)if(1===t.nodeType||r)if(d=(u=t[x]||(t[x]={}))[t.uniqueID]||(u[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[n]||t;else{if((c=d[s])&&c[0]===S&&c[1]===a)return p[2]=c[2];if(d[s]=p,p[2]=e(t,i,l))return!0}return!1}}function be(e){return e.length>1?function(t,i,n){for(var o=e.length;o--;)if(!e[o](t,i,n))return!1;return!0}:e[0]}function Se(e,t,i,n,o){for(var s,r=[],a=0,l=e.length,c=null!=t;a<l;a++)(s=e[a])&&(i&&!i(s,n,o)||(r.push(s),c&&t.push(a)));return r}function Te(e,t,i,n,o,s){return n&&!n[x]&&(n=Te(n)),o&&!o[x]&&(o=Te(o,s)),ce((function(s,r,a,l){var c,d,u,p=[],h=[],f=r.length,v=s||function(e,t,i){for(var n=0,o=t.length;n<o;n++)ae(e,t[n],i);return i}(t||"*",a.nodeType?[a]:a,[]),g=!e||!s&&t?v:Se(v,p,e,a,l),m=i?o||(s?e:f||n)?[]:r:g;if(i&&i(g,m,a,l),n)for(c=Se(m,h),n(c,[],a,l),d=c.length;d--;)(u=c[d])&&(m[h[d]]=!(g[h[d]]=u));if(s){if(o||e){if(o){for(c=[],d=m.length;d--;)(u=m[d])&&c.push(g[d]=u);o(null,m=[],c,l)}for(d=m.length;d--;)(u=m[d])&&(c=o?M(s,u):p[d])>-1&&(s[c]=!(r[c]=u))}}else m=Se(m===r?m.splice(f,m.length):m),o?o(null,r,m,l):O.apply(r,m)}))}function ke(e){for(var t,i,o,s=e.length,r=n.relative[e[0].type],a=r||n.relative[" "],l=r?1:0,d=xe((function(e){return e===t}),a,!0),u=xe((function(e){return M(t,e)>-1}),a,!0),p=[function(e,i,n){var o=!r&&(n||i!==c)||((t=i).nodeType?d(e,i,n):u(e,i,n));return t=null,o}];l<s;l++)if(i=n.relative[e[l].type])p=[xe(be(p),i)];else{if((i=n.filter[e[l].type].apply(null,e[l].matches))[x]){for(o=++l;o<s&&!n.relative[e[o].type];o++);return Te(l>1&&be(p),l>1&&we(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(_,"$1"),i,l<o&&ke(e.slice(l,o)),o<s&&ke(e=e.slice(o)),o<s&&we(e))}p.push(i)}return be(p)}return ye.prototype=n.filters=n.pseudos,n.setFilters=new ye,r=ae.tokenize=function(e,t){var i,o,s,r,a,l,c,d=C[e+" "];if(d)return t?0:d.slice(0);for(a=e,l=[],c=n.preFilter;a;){for(r in i&&!(o=Y.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(s=[])),i=!1,(o=R.exec(a))&&(i=o.shift(),s.push({value:i,type:o[0].replace(_," ")}),a=a.slice(i.length)),n.filter)!(o=V[r].exec(a))||c[r]&&!(o=c[r](o))||(i=o.shift(),s.push({value:i,type:r,matches:o}),a=a.slice(i.length));if(!i)break}return t?a.length:a?ae.error(e):C(e,l).slice(0)},a=ae.compile=function(e,t){var i,o=[],s=[],a=E[e+" "];if(!a){for(t||(t=r(e)),i=t.length;i--;)(a=ke(t[i]))[x]?o.push(a):s.push(a);(a=E(e,function(e,t){var i=t.length>0,o=e.length>0,s=function(s,r,a,l,d){var u,f,g,m=0,y="0",w=s&&[],x=[],b=c,T=s||o&&n.find.TAG("*",d),k=S+=null==b?1:Math.random()||.1,C=T.length;for(d&&(c=r==h||r||d);y!==C&&null!=(u=T[y]);y++){if(o&&u){for(f=0,r||u.ownerDocument==h||(p(u),a=!v);g=e[f++];)if(g(u,r||h,a)){l.push(u);break}d&&(S=k)}i&&((u=!g&&u)&&m--,s&&w.push(u))}if(m+=y,i&&y!==m){for(f=0;g=t[f++];)g(w,x,r,a);if(s){if(m>0)for(;y--;)w[y]||x[y]||(x[y]=D.call(l));x=Se(x)}O.apply(l,x),d&&!s&&x.length>0&&m+t.length>1&&ae.uniqueSort(l)}return d&&(S=k,c=b),w};return i?ce(s):s}(s,o))).selector=e}return a},l=ae.select=function(e,t,i,o){var s,l,c,d,u,p="function"==typeof e&&e,h=!o&&r(e=p.selector||e);if(i=i||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&v&&n.relative[l[1].type]){if(!(t=(n.find.ID(c.matches[0].replace(te,ie),t)||[])[0]))return i;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(s=V.needsContext.test(e)?0:l.length;s--&&(c=l[s],!n.relative[d=c.type]);)if((u=n.find[d])&&(o=u(c.matches[0].replace(te,ie),ee.test(l[0].type)&&me(t.parentNode)||t))){if(l.splice(s,1),!(e=o.length&&we(l)))return O.apply(i,o),i;break}}return(p||a(e,h))(o,t,!v,i,!t||ee.test(e)&&me(t.parentNode)||t),i},i.sortStable=x.split("").sort($).join("")===x,i.detectDuplicates=!!u,p(),i.sortDetached=de((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),de((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ue("type|href|height|width",(function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),i.attributes&&de((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ue("value",(function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),de((function(e){return null==e.getAttribute("disabled")}))||ue(N,(function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null})),ae}(e);x.find=S,x.expr=S.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=S.uniqueSort,x.text=S.getText,x.isXMLDoc=S.isXML,x.contains=S.contains,x.escapeSelector=S.escape;var T=function(e,t,i){for(var n=[],o=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&x(e).is(i))break;n.push(e)}return n},k=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},C=x.expr.match.needsContext;function E(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function $(e,t,i){return f(t)?x.grep(e,(function(e,n){return!!t.call(e,n,e)!==i})):t.nodeType?x.grep(e,(function(e){return e===t!==i})):"string"!=typeof t?x.grep(e,(function(e){return a.call(t,e)>-1!==i})):x.filter(t,e,i)}x.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?x.find.matchesSelector(n,e)?[n]:[]:x.find.matches(e,x.grep(t,(function(e){return 1===e.nodeType})))},x.fn.extend({find:function(e){var t,i,n=this.length,o=this;if("string"!=typeof e)return this.pushStack(x(e).filter((function(){for(t=0;t<n;t++)if(x.contains(o[t],this))return!0})));for(i=this.pushStack([]),t=0;t<n;t++)x.find(e,o[t],i);return n>1?x.uniqueSort(i):i},filter:function(e){return this.pushStack($(this,e||[],!1))},not:function(e){return this.pushStack($(this,e||[],!0))},is:function(e){return!!$(this,"string"==typeof e&&C.test(e)?x(e):e||[],!1).length}});var P,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,i){var n,o;if(!e)return this;if(i=i||P,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:H.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:g,!0)),A.test(n[1])&&x.isPlainObject(t))for(n in t)f(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(o=g.getElementById(n[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):f(e)?void 0!==i.ready?i.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,P=x(g);var D=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),i=t.length;return this.filter((function(){for(var e=0;e<i;e++)if(x.contains(this,t[e]))return!0}))},closest:function(e,t){var i,n=0,o=this.length,s=[],r="string"!=typeof e&&x(e);if(!C.test(e))for(;n<o;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&x.find.matchesSelector(i,e))){s.push(i);break}return this.pushStack(s.length>1?x.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?a.call(x(e),this[0]):a.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,i){return T(e,"parentNode",i)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,i){return T(e,"nextSibling",i)},prevUntil:function(e,t,i){return T(e,"previousSibling",i)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:(E(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},(function(e,t){x.fn[e]=function(i,n){var o=x.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(o=x.filter(n,o)),this.length>1&&(L[e]||x.uniqueSort(o),D.test(e)&&o.reverse()),this.pushStack(o)}}));var j=/[^\x20\t\r\n\f]+/g;function M(e){return e}function N(e){throw e}function z(e,t,i,n){var o;try{e&&f(o=e.promise)?o.call(e).done(t).fail(i):e&&f(o=e.then)?o.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match(j)||[],(function(e,i){t[i]=!0})),t}(e):x.extend({},e);var t,i,n,o,s=[],r=[],a=-1,l=function(){for(o=o||e.once,n=t=!0;r.length;a=-1)for(i=r.shift();++a<s.length;)!1===s[a].apply(i[0],i[1])&&e.stopOnFalse&&(a=s.length,i=!1);e.memory||(i=!1),t=!1,o&&(s=i?[]:"")},c={add:function(){return s&&(i&&!t&&(a=s.length-1,r.push(i)),function t(i){x.each(i,(function(i,n){f(n)?e.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==w(n)&&t(n)}))}(arguments),i&&!t&&l()),this},remove:function(){return x.each(arguments,(function(e,t){for(var i;(i=x.inArray(t,s,i))>-1;)s.splice(i,1),i<=a&&a--})),this},has:function(e){return e?x.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return o=r=[],s=i="",this},disabled:function(){return!s},lock:function(){return o=r=[],i||t||(s=i=""),this},locked:function(){return!!o},fireWith:function(e,i){return o||(i=[e,(i=i||[]).slice?i.slice():i],r.push(i),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},x.extend({Deferred:function(t){var i=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return x.Deferred((function(t){x.each(i,(function(i,n){var o=f(e[n[4]])&&e[n[4]];s[n[1]]((function(){var e=o&&o.apply(this,arguments);e&&f(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(t,n,o){var s=0;function r(t,i,n,o){return function(){var a=this,l=arguments,c=function(){var e,c;if(!(t<s)){if((e=n.apply(a,l))===i.promise())throw new TypeError("Thenable self-resolution");c=e&&("object"==typeof e||"function"==typeof e)&&e.then,f(c)?o?c.call(e,r(s,i,M,o),r(s,i,N,o)):(s++,c.call(e,r(s,i,M,o),r(s,i,N,o),r(s,i,M,i.notifyWith))):(n!==M&&(a=void 0,l=[e]),(o||i.resolveWith)(a,l))}},d=o?c:function(){try{c()}catch(e){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(e,d.stackTrace),t+1>=s&&(n!==N&&(a=void 0,l=[e]),i.rejectWith(a,l))}};t?d():(x.Deferred.getStackHook&&(d.stackTrace=x.Deferred.getStackHook()),e.setTimeout(d))}}return x.Deferred((function(e){i[0][3].add(r(0,e,f(o)?o:M,e.notifyWith)),i[1][3].add(r(0,e,f(t)?t:M)),i[2][3].add(r(0,e,f(n)?n:N))})).promise()},promise:function(e){return null!=e?x.extend(e,o):o}},s={};return x.each(i,(function(e,t){var r=t[2],a=t[5];o[t[1]]=r.add,a&&r.add((function(){n=a}),i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock),r.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=r.fireWith})),o.promise(s),t&&t.call(s,s),s},when:function(e){var t=arguments.length,i=t,n=Array(i),s=o.call(arguments),r=x.Deferred(),a=function(e){return function(i){n[e]=this,s[e]=arguments.length>1?o.call(arguments):i,--t||r.resolveWith(n,s)}};if(t<=1&&(z(e,r.done(a(i)).resolve,r.reject,!t),"pending"===r.state()||f(s[i]&&s[i].then)))return r.then();for(;i--;)z(s[i],a(i),r.reject);return r.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(t,i){e.console&&e.console.warn&&t&&q.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)},x.readyException=function(t){e.setTimeout((function(){throw t}))};var I=x.Deferred();function X(){g.removeEventListener("DOMContentLoaded",X),e.removeEventListener("load",X),x.ready()}x.fn.ready=function(e){return I.then(e).catch((function(e){x.readyException(e)})),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||I.resolveWith(g,[x]))}}),x.ready.then=I.then,"complete"===g.readyState||"loading"!==g.readyState&&!g.documentElement.doScroll?e.setTimeout(x.ready):(g.addEventListener("DOMContentLoaded",X),e.addEventListener("load",X));var W=function(e,t,i,n,o,s,r){var a=0,l=e.length,c=null==i;if("object"===w(i))for(a in o=!0,i)W(e,t,a,i[a],!0,s,r);else if(void 0!==n&&(o=!0,f(n)||(r=!0),c&&(r?(t.call(e,n),t=null):(c=t,t=function(e,t,i){return c.call(x(e),i)})),t))for(;a<l;a++)t(e[a],i,r?n:n.call(e[a],a,t(e[a],i)));return o?e:c?t.call(e):l?t(e[0],i):s},_=/^-ms-/,Y=/-([a-z])/g;function R(e,t){return t.toUpperCase()}function B(e){return e.replace(_,"ms-").replace(Y,R)}var F=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function U(){this.expando=x.expando+U.uid++}U.uid=1,U.prototype={cache:function(e){var t=e[this.expando];return t||(t={},F(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,o=this.cache(e);if("string"==typeof t)o[B(t)]=i;else for(n in t)o[B(n)]=t[n];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][B(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(B):(t=B(t))in n?[t]:t.match(j)||[]).length;for(;i--;)delete n[t[i]]}(void 0===t||x.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var V=new U,K=new U,G=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function J(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(Q,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:G.test(e)?JSON.parse(e):e)}(i)}catch(e){}K.set(e,t,i)}else i=void 0;return i}x.extend({hasData:function(e){return K.hasData(e)||V.hasData(e)},data:function(e,t,i){return K.access(e,t,i)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,i){return V.access(e,t,i)},_removeData:function(e,t){V.remove(e,t)}}),x.fn.extend({data:function(e,t){var i,n,o,s=this[0],r=s&&s.attributes;if(void 0===e){if(this.length&&(o=K.get(s),1===s.nodeType&&!V.get(s,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=B(n.slice(5)),J(s,n,o[n]));V.set(s,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){K.set(this,e)})):W(this,(function(t){var i;if(s&&void 0===t)return void 0!==(i=K.get(s,e))||void 0!==(i=J(s,e))?i:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),x.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=V.get(e,t),i&&(!n||Array.isArray(i)?n=V.access(e,t,x.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=x.queue(e,t),n=i.length,o=i.shift(),s=x._queueHooks(e,t);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===t&&i.unshift("inprogress"),delete s.stop,o.call(e,(function(){x.dequeue(e,t)}),s)),!n&&s&&s.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return V.get(e,i)||V.access(e,i,{empty:x.Callbacks("once memory").add((function(){V.remove(e,[t+"queue",i])}))})}}),x.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?x.queue(this[0],e):void 0===t?this:this.each((function(){var i=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&x.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){x.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,o=x.Deferred(),s=this,r=this.length,a=function(){--n||o.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";r--;)(i=V.get(s[r],e+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),o.promise(t)}});var Z=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ee=new RegExp("^(?:([+-])=|)("+Z+")([a-z%]*)$","i"),te=["Top","Right","Bottom","Left"],ie=g.documentElement,ne=function(e){return x.contains(e.ownerDocument,e)},oe={composed:!0};ie.getRootNode&&(ne=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ne(e)&&"none"===x.css(e,"display")};function re(e,t,i,n){var o,s,r=20,a=n?function(){return n.cur()}:function(){return x.css(e,t,"")},l=a(),c=i&&i[3]||(x.cssNumber[t]?"":"px"),d=e.nodeType&&(x.cssNumber[t]||"px"!==c&&+l)&&ee.exec(x.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)x.style(e,t,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;d*=2,x.style(e,t,d+c),i=i||[]}return i&&(d=+d||+l||0,o=i[1]?d+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=d,n.end=o)),o}var ae={};function le(e){var t,i=e.ownerDocument,n=e.nodeName,o=ae[n];return o||(t=i.body.appendChild(i.createElement(n)),o=x.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ae[n]=o,o)}function ce(e,t){for(var i,n,o=[],s=0,r=e.length;s<r;s++)(n=e[s]).style&&(i=n.style.display,t?("none"===i&&(o[s]=V.get(n,"display")||null,o[s]||(n.style.display="")),""===n.style.display&&se(n)&&(o[s]=le(n))):"none"!==i&&(o[s]="none",V.set(n,"display",i)));for(s=0;s<r;s++)null!=o[s]&&(e[s].style.display=o[s]);return e}x.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){se(this)?x(this).show():x(this).hide()}))}});var de,ue,pe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;de=g.createDocumentFragment().appendChild(g.createElement("div")),(ue=g.createElement("input")).setAttribute("type","radio"),ue.setAttribute("checked","checked"),ue.setAttribute("name","t"),de.appendChild(ue),h.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue,de.innerHTML="<option></option>",h.option=!!de.lastChild;var ve={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&E(e,t)?x.merge([e],i):i}function me(e,t){for(var i=0,n=e.length;i<n;i++)V.set(e[i],"globalEval",!t||V.get(t[i],"globalEval"))}ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td,h.option||(ve.optgroup=ve.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function we(e,t,i,n,o){for(var s,r,a,l,c,d,u=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((s=e[h])||0===s)if("object"===w(s))x.merge(p,s.nodeType?[s]:s);else if(ye.test(s)){for(r=r||u.appendChild(t.createElement("div")),a=(he.exec(s)||["",""])[1].toLowerCase(),l=ve[a]||ve._default,r.innerHTML=l[1]+x.htmlPrefilter(s)+l[2],d=l[0];d--;)r=r.lastChild;x.merge(p,r.childNodes),(r=u.firstChild).textContent=""}else p.push(t.createTextNode(s));for(u.textContent="",h=0;s=p[h++];)if(n&&x.inArray(s,n)>-1)o&&o.push(s);else if(c=ne(s),r=ge(u.appendChild(s),"script"),c&&me(r),i)for(d=0;s=r[d++];)fe.test(s.type||"")&&i.push(s);return u}var xe=/^([^.]*)(?:\.(.+)|)/;function be(){return!0}function Se(){return!1}function Te(e,t){return e===function(){try{return g.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,i,n,o,s){var r,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)ke(e,a,i,n,t[a],s);return e}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=Se;else if(!o)return e;return 1===s&&(r=o,(o=function(e){return x().off(e),r.apply(this,arguments)}).guid=r.guid||(r.guid=x.guid++)),e.each((function(){x.event.add(this,t,o,n,i)}))}function Ce(e,t,i){i?(V.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var n,s,r=V.get(this,t);if(1&e.isTrigger&&this[t]){if(r.length)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(r=o.call(arguments),V.set(this,t,r),n=i(this,t),this[t](),r!==(s=V.get(this,t))||n?V.set(this,t,!1):s={},r!==s)return e.stopImmediatePropagation(),e.preventDefault(),s&&s.value}else r.length&&(V.set(this,t,{value:x.event.trigger(x.extend(r[0],x.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===V.get(e,t)&&x.event.add(e,t,be)}x.event={global:{},add:function(e,t,i,n,o){var s,r,a,l,c,d,u,p,h,f,v,g=V.get(e);if(F(e))for(i.handler&&(i=(s=i).handler,o=s.selector),o&&x.find.matchesSelector(ie,o),i.guid||(i.guid=x.guid++),(l=g.events)||(l=g.events=Object.create(null)),(r=g.handle)||(r=g.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(j)||[""]).length;c--;)h=v=(a=xe.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),h&&(u=x.event.special[h]||{},h=(o?u.delegateType:u.bindType)||h,u=x.event.special[h]||{},d=x.extend({type:h,origType:v,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:f.join(".")},s),(p=l[h])||((p=l[h]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,n,f,r)||e.addEventListener&&e.addEventListener(h,r)),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=i.guid)),o?p.splice(p.delegateCount++,0,d):p.push(d),x.event.global[h]=!0)},remove:function(e,t,i,n,o){var s,r,a,l,c,d,u,p,h,f,v,g=V.hasData(e)&&V.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(j)||[""]).length;c--;)if(h=v=(a=xe.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),h){for(u=x.event.special[h]||{},p=l[h=(n?u.delegateType:u.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=p.length;s--;)d=p[s],!o&&v!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||n&&n!==d.selector&&("**"!==n||!d.selector)||(p.splice(s,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));r&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,f,g.handle)||x.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)x.event.remove(e,h+t[c],i,n,!0);x.isEmptyObject(l)&&V.remove(e,"handle events")}},dispatch:function(e){var t,i,n,o,s,r,a=new Array(arguments.length),l=x.event.fix(e),c=(V.get(this,"events")||Object.create(null))[l.type]||[],d=x.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(r=x.event.handlers.call(this,l,c),t=0;(o=r[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,i=0;(s=o.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(n=((x.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(e,t){var i,n,o,s,r,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[o=(n=t[i]).selector+" "]&&(r[o]=n.needsContext?x(o,this).index(c)>-1:x.find(o,this,null,[c]).length),r[o]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:f(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&E(t,"input")&&Ce(t,"click",be),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&E(t,"input")&&Ce(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&E(t,"input")&&V.get(t,"click")||E(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?be:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=be,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=be,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=be,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(e,t){x.event.special[e]={setup:function(){return Ce(this,e,Te),!1},trigger:function(){return Ce(this,e),!0},_default:function(){return!0},delegateType:t}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,o=e.relatedTarget,s=e.handleObj;return o&&(o===n||x.contains(n,o))||(e.type=s.origType,i=s.handler.apply(this,arguments),e.type=t),i}}})),x.fn.extend({on:function(e,t,i,n){return ke(this,e,t,i,n)},one:function(e,t,i,n){return ke(this,e,t,i,n,1)},off:function(e,t,i){var n,o;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,x(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Se),this.each((function(){x.event.remove(this,e,i,t)}))}});var Ee=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,$e=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pe(e,t){return E(e,"table")&&E(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var i,n,o,s,r,a;if(1===t.nodeType){if(V.hasData(e)&&(a=V.get(e).events))for(o in V.remove(t,"handle events"),a)for(i=0,n=a[o].length;i<n;i++)x.event.add(t,o,a[o][i]);K.hasData(e)&&(s=K.access(e),r=x.extend({},s),K.set(t,r))}}function Oe(e,t){var i=t.nodeName.toLowerCase();"input"===i&&pe.test(e.type)?t.checked=e.checked:"input"!==i&&"textarea"!==i||(t.defaultValue=e.defaultValue)}function je(e,t,i,n){t=s(t);var o,r,a,l,c,d,u=0,p=e.length,v=p-1,g=t[0],m=f(g);if(m||p>1&&"string"==typeof g&&!h.checkClone&&Ae.test(g))return e.each((function(o){var s=e.eq(o);m&&(t[0]=g.call(this,o,s.html())),je(s,t,i,n)}));if(p&&(r=(o=we(t,e[0].ownerDocument,!1,e,n)).firstChild,1===o.childNodes.length&&(o=r),r||n)){for(l=(a=x.map(ge(o,"script"),He)).length;u<p;u++)c=o,u!==v&&(c=x.clone(c,!0,!0),l&&x.merge(a,ge(c,"script"))),i.call(e[u],c,u);if(l)for(d=a[a.length-1].ownerDocument,x.map(a,De),u=0;u<l;u++)c=a[u],fe.test(c.type||"")&&!V.access(c,"globalEval")&&x.contains(d,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?x._evalUrl&&!c.noModule&&x._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},d):y(c.textContent.replace($e,""),c,d))}return e}function Me(e,t,i){for(var n,o=t?x.filter(t,e):e,s=0;null!=(n=o[s]);s++)i||1!==n.nodeType||x.cleanData(ge(n)),n.parentNode&&(i&&ne(n)&&me(ge(n,"script")),n.parentNode.removeChild(n));return e}x.extend({htmlPrefilter:function(e){return e},clone:function(e,t,i){var n,o,s,r,a=e.cloneNode(!0),l=ne(e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(r=ge(a),n=0,o=(s=ge(e)).length;n<o;n++)Oe(s[n],r[n]);if(t)if(i)for(s=s||ge(e),r=r||ge(a),n=0,o=s.length;n<o;n++)Le(s[n],r[n]);else Le(e,a);return(r=ge(a,"script")).length>0&&me(r,!l&&ge(e,"script")),a},cleanData:function(e){for(var t,i,n,o=x.event.special,s=0;void 0!==(i=e[s]);s++)if(F(i)){if(t=i[V.expando]){if(t.events)for(n in t.events)o[n]?x.event.remove(i,n):x.removeEvent(i,n,t.handle);i[V.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),x.fn.extend({detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return W(this,(function(e){return void 0===e?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return je(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pe(this,e).appendChild(e)}))},prepend:function(){return je(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Pe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return x.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ee.test(e)&&!ve[(he.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(x.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,(function(t){var i=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(ge(this)),i&&i.replaceChild(t,this))}),e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){x.fn[e]=function(e){for(var i,n=[],o=x(e),s=o.length-1,a=0;a<=s;a++)i=a===s?this:this.clone(!0),x(o[a])[t](i),r.apply(n,i.get());return this.pushStack(n)}}));var Ne=new RegExp("^("+Z+")(?!px)[a-z%]+$","i"),ze=function(t){var i=t.ownerDocument.defaultView;return i&&i.opener||(i=e),i.getComputedStyle(t)},qe=function(e,t,i){var n,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in n=i.call(e),t)e.style[o]=s[o];return n},Ie=new RegExp(te.join("|"),"i");function Xe(e,t,i){var n,o,s,r,a=e.style;return(i=i||ze(e))&&(""!==(r=i.getPropertyValue(t)||i[t])||ne(e)||(r=x.style(e,t)),!h.pixelBoxStyles()&&Ne.test(r)&&Ie.test(t)&&(n=a.width,o=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=o,a.maxWidth=s)),void 0!==r?r+"":r}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(d){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(c).appendChild(d);var t=e.getComputedStyle(d);n="1%"!==t.top,l=12===i(t.marginLeft),d.style.right="60%",r=36===i(t.right),o=36===i(t.width),d.style.position="absolute",s=12===i(d.offsetWidth/3),ie.removeChild(c),d=null}}function i(e){return Math.round(parseFloat(e))}var n,o,s,r,a,l,c=g.createElement("div"),d=g.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===d.style.backgroundClip,x.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),r},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),s},reliableTrDimensions:function(){var t,i,n,o;return null==a&&(t=g.createElement("table"),i=g.createElement("tr"),n=g.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",i.style.cssText="border:1px solid",i.style.height="1px",n.style.height="9px",n.style.display="block",ie.appendChild(t).appendChild(i).appendChild(n),o=e.getComputedStyle(i),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===i.offsetHeight,ie.removeChild(t)),a}}))}();var _e=["Webkit","Moz","ms"],Ye=g.createElement("div").style,Re={};function Be(e){var t=x.cssProps[e]||Re[e];return t||(e in Ye?e:Re[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=_e.length;i--;)if((e=_e[i]+t)in Ye)return e}(e)||e)}var Fe=/^(none|table(?!-c[ea]).+)/,Ue=/^--/,Ve={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function Ge(e,t,i){var n=ee.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function Qe(e,t,i,n,o,s){var r="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=x.css(e,i+te[r],!0,o)),n?("content"===i&&(l-=x.css(e,"padding"+te[r],!0,o)),"margin"!==i&&(l-=x.css(e,"border"+te[r]+"Width",!0,o))):(l+=x.css(e,"padding"+te[r],!0,o),"padding"!==i?l+=x.css(e,"border"+te[r]+"Width",!0,o):a+=x.css(e,"border"+te[r]+"Width",!0,o));return!n&&s>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-a-.5))||0),l}function Je(e,t,i){var n=ze(e),o=(!h.boxSizingReliable()||i)&&"border-box"===x.css(e,"boxSizing",!1,n),s=o,r=Xe(e,t,n),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ne.test(r)){if(!i)return r;r="auto"}return(!h.boxSizingReliable()&&o||!h.reliableTrDimensions()&&E(e,"tr")||"auto"===r||!parseFloat(r)&&"inline"===x.css(e,"display",!1,n))&&e.getClientRects().length&&(o="border-box"===x.css(e,"boxSizing",!1,n),(s=a in e)&&(r=e[a])),(r=parseFloat(r)||0)+Qe(e,t,i||(o?"border":"content"),s,n,r)+"px"}function Ze(e,t,i,n,o){return new Ze.prototype.init(e,t,i,n,o)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Xe(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,s,r,a=B(t),l=Ue.test(t),c=e.style;if(l||(t=Be(a)),r=x.cssHooks[t]||x.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(o=r.get(e,!1,n))?o:c[t];"string"===(s=typeof i)&&(o=ee.exec(i))&&o[1]&&(i=re(e,t,o),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=o&&o[3]||(x.cssNumber[a]?"":"px")),h.clearCloneStyle||""!==i||0!==t.indexOf("background")||(c[t]="inherit"),r&&"set"in r&&void 0===(i=r.set(e,i,n))||(l?c.setProperty(t,i):c[t]=i))}},css:function(e,t,i,n){var o,s,r,a=B(t);return Ue.test(t)||(t=Be(a)),(r=x.cssHooks[t]||x.cssHooks[a])&&"get"in r&&(o=r.get(e,!0,i)),void 0===o&&(o=Xe(e,t,n)),"normal"===o&&t in Ke&&(o=Ke[t]),""===i||i?(s=parseFloat(o),!0===i||isFinite(s)?s||0:o):o}}),x.each(["height","width"],(function(e,t){x.cssHooks[t]={get:function(e,i,n){if(i)return!Fe.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Je(e,t,n):qe(e,Ve,(function(){return Je(e,t,n)}))},set:function(e,i,n){var o,s=ze(e),r=!h.scrollboxSize()&&"absolute"===s.position,a=(r||n)&&"border-box"===x.css(e,"boxSizing",!1,s),l=n?Qe(e,t,n,a,s):0;return a&&r&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-Qe(e,t,"border",!1,s)-.5)),l&&(o=ee.exec(i))&&"px"!==(o[3]||"px")&&(e.style[t]=i,i=x.css(e,t)),Ge(0,i,l)}}})),x.cssHooks.marginLeft=We(h.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Xe(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(e,t){x.cssHooks[e+t]={expand:function(i){for(var n=0,o={},s="string"==typeof i?i.split(" "):[i];n<4;n++)o[e+te[n]+t]=s[n]||s[n-2]||s[0];return o}},"margin"!==e&&(x.cssHooks[e+t].set=Ge)})),x.fn.extend({css:function(e,t){return W(this,(function(e,t,i){var n,o,s={},r=0;if(Array.isArray(t)){for(n=ze(e),o=t.length;r<o;r++)s[t[r]]=x.css(e,t[r],!1,n);return s}return void 0!==i?x.style(e,t,i):x.css(e,t)}),e,t,arguments.length>1)}}),x.Tween=Ze,Ze.prototype={constructor:Ze,init:function(e,t,i,n,o,s){this.elem=e,this.prop=i,this.easing=o||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=s||(x.cssNumber[i]?"":"px")},cur:function(){var e=Ze.propHooks[this.prop];return e&&e.get?e.get(this):Ze.propHooks._default.get(this)},run:function(e){var t,i=Ze.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):Ze.propHooks._default.set(this),this}},Ze.prototype.init.prototype=Ze.prototype,Ze.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||!x.cssHooks[e.prop]&&null==e.elem.style[Be(e.prop)]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}},Ze.propHooks.scrollTop=Ze.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},x.fx=Ze.prototype.init,x.fx.step={};var et,tt,it=/^(?:toggle|show|hide)$/,nt=/queueHooks$/;function ot(){tt&&(!1===g.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(ot):e.setTimeout(ot,x.fx.interval),x.fx.tick())}function st(){return e.setTimeout((function(){et=void 0})),et=Date.now()}function rt(e,t){var i,n=0,o={height:e};for(t=t?1:0;n<4;n+=2-t)o["margin"+(i=te[n])]=o["padding"+i]=e;return t&&(o.opacity=o.width=e),o}function at(e,t,i){for(var n,o=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),s=0,r=o.length;s<r;s++)if(n=o[s].call(i,t,e))return n}function lt(e,t,i){var n,o,s=0,r=lt.prefilters.length,a=x.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=et||st(),i=Math.max(0,c.startTime+c.duration-t),n=1-(i/c.duration||0),s=0,r=c.tweens.length;s<r;s++)c.tweens[s].run(n);return a.notifyWith(e,[c,n,i]),n<1&&r?i:(r||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},i),originalProperties:t,originalOptions:i,startTime:et||st(),duration:i.duration,tweens:[],createTween:function(t,i){var n=x.Tween(e,c.opts,t,i,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(n),n},stop:function(t){var i=0,n=t?c.tweens.length:0;if(o)return this;for(o=!0;i<n;i++)c.tweens[i].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),d=c.props;for(!function(e,t){var i,n,o,s,r;for(i in e)if(o=t[n=B(i)],s=e[i],Array.isArray(s)&&(o=s[1],s=e[i]=s[0]),i!==n&&(e[n]=s,delete e[i]),(r=x.cssHooks[n])&&"expand"in r)for(i in s=r.expand(s),delete e[n],s)i in e||(e[i]=s[i],t[i]=o);else t[n]=o}(d,c.opts.specialEasing);s<r;s++)if(n=lt.prefilters[s].call(c,e,d,c.opts))return f(n.stop)&&(x._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return x.map(d,at,c),f(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),x.fx.timer(x.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}x.Animation=x.extend(lt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return re(i.elem,e,ee.exec(t),i),i}]},tweener:function(e,t){f(e)?(t=e,e=["*"]):e=e.match(j);for(var i,n=0,o=e.length;n<o;n++)i=e[n],lt.tweeners[i]=lt.tweeners[i]||[],lt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,o,s,r,a,l,c,d,u="width"in t||"height"in t,p=this,h={},f=e.style,v=e.nodeType&&se(e),g=V.get(e,"fxshow");for(n in i.queue||(null==(r=x._queueHooks(e,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,p.always((function(){p.always((function(){r.unqueued--,x.queue(e,"fx").length||r.empty.fire()}))}))),t)if(o=t[n],it.test(o)){if(delete t[n],s=s||"toggle"===o,o===(v?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;v=!0}h[n]=g&&g[n]||x.style(e,n)}if((l=!x.isEmptyObject(t))||!x.isEmptyObject(h))for(n in u&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=V.get(e,"display")),"none"===(d=x.css(e,"display"))&&(c?d=c:(ce([e],!0),c=e.style.display||c,d=x.css(e,"display"),ce([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===x.css(e,"float")&&(l||(p.done((function(){f.display=c})),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,h)l||(g?"hidden"in g&&(v=g.hidden):g=V.access(e,"fxshow",{display:c}),s&&(g.hidden=!v),v&&ce([e],!0),p.done((function(){for(n in v||ce([e]),V.remove(e,"fxshow"),h)x.style(e,n,h[n])}))),l=at(v?g[n]:0,n,p),n in g||(g[n]=l.start,v&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),x.speed=function(e,t,i){var n=e&&"object"==typeof e?x.extend({},e):{complete:i||!i&&t||f(e)&&e,duration:e,easing:i&&t||t&&!f(t)&&t};return x.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in x.fx.speeds?n.duration=x.fx.speeds[n.duration]:n.duration=x.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){f(n.old)&&n.old.call(this),n.queue&&x.dequeue(this,n.queue)},n},x.fn.extend({fadeTo:function(e,t,i,n){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var o=x.isEmptyObject(e),s=x.speed(t,i,n),r=function(){var t=lt(this,x.extend({},e),s);(o||V.get(this,"finish"))&&t.stop(!0)};return r.finish=r,o||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",s=x.timers,r=V.get(this);if(o)r[o]&&r[o].stop&&n(r[o]);else for(o in r)r[o]&&r[o].stop&&nt.test(o)&&n(r[o]);for(o=s.length;o--;)s[o].elem!==this||null!=e&&s[o].queue!==e||(s[o].anim.stop(i),t=!1,s.splice(o,1));!t&&i||x.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,i=V.get(this),n=i[e+"queue"],o=i[e+"queueHooks"],s=x.timers,r=n?n.length:0;for(i.finish=!0,x.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<r;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete i.finish}))}}),x.each(["toggle","show","hide"],(function(e,t){var i=x.fn[t];x.fn[t]=function(e,n,o){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(rt(t,!0),e,n,o)}})),x.each({slideDown:rt("show"),slideUp:rt("hide"),slideToggle:rt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){x.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}})),x.timers=[],x.fx.tick=function(){var e,t=0,i=x.timers;for(et=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||x.fx.stop(),et=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){tt||(tt=!0,ot())},x.fx.stop=function(){tt=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(t,i){return t=x.fx&&x.fx.speeds[t]||t,i=i||"fx",this.queue(i,(function(i,n){var o=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(o)}}))},function(){var e=g.createElement("input"),t=g.createElement("select").appendChild(g.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=g.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var ct,dt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return W(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){x.removeAttr(this,e)}))}}),x.extend({attr:function(e,t,i){var n,o,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?x.prop(e,t,i):(1===s&&x.isXMLDoc(e)||(o=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?ct:void 0)),void 0!==i?null===i?void x.removeAttr(e,t):o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:(e.setAttribute(t,i+""),i):o&&"get"in o&&null!==(n=o.get(e,t))?n:null==(n=x.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&E(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,o=t&&t.match(j);if(o&&1===e.nodeType)for(;i=o[n++];)e.removeAttribute(i)}}),ct={set:function(e,t,i){return!1===t?x.removeAttr(e,i):e.setAttribute(i,i),i}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(e,t){var i=dt[t]||x.find.attr;dt[t]=function(e,t,n){var o,s,r=t.toLowerCase();return n||(s=dt[r],dt[r]=o,o=null!=i(e,t,n)?r:null,dt[r]=s),o}}));var ut=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;function ht(e){return(e.match(j)||[]).join(" ")}function ft(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}x.fn.extend({prop:function(e,t){return W(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[x.propFix[e]||e]}))}}),x.extend({prop:function(e,t,i){var n,o,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&x.isXMLDoc(e)||(t=x.propFix[t]||t,o=x.propHooks[t]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:e[t]=i:o&&"get"in o&&null!==(n=o.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):ut.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(e){var t,i,n,o,s,r,a,l=0;if(f(e))return this.each((function(t){x(this).addClass(e.call(this,t,ft(this)))}));if((t=vt(e)).length)for(;i=this[l++];)if(o=ft(i),n=1===i.nodeType&&" "+ht(o)+" "){for(r=0;s=t[r++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o!==(a=ht(n))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,o,s,r,a,l=0;if(f(e))return this.each((function(t){x(this).removeClass(e.call(this,t,ft(this)))}));if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;i=this[l++];)if(o=ft(i),n=1===i.nodeType&&" "+ht(o)+" "){for(r=0;s=t[r++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");o!==(a=ht(n))&&i.setAttribute("class",a)}return this},toggleClass:function(e,t){var i=typeof e,n="string"===i||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):f(e)?this.each((function(i){x(this).toggleClass(e.call(this,i,ft(this),t),t)})):this.each((function(){var t,o,s,r;if(n)for(o=0,s=x(this),r=vt(e);t=r[o++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==i||((t=ft(this))&&V.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":V.get(this,"__className__")||""))}))},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&(" "+ht(ft(i))+" ").indexOf(t)>-1)return!0;return!1}});var gt=/\r/g;x.fn.extend({val:function(e){var t,i,n,o=this[0];return arguments.length?(n=f(e),this.each((function(i){var o;1===this.nodeType&&(null==(o=n?e.call(this,i,x(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=x.map(o,(function(e){return null==e?"":e+""}))),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(i=t.get(o,"value"))?i:"string"==typeof(i=o.value)?i.replace(gt,""):null==i?"":i:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:ht(x.text(e))}},select:{get:function(e){var t,i,n,o=e.options,s=e.selectedIndex,r="select-one"===e.type,a=r?null:[],l=r?s+1:o.length;for(n=s<0?l:r?s:0;n<l;n++)if(((i=o[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!E(i.parentNode,"optgroup"))){if(t=x(i).val(),r)return t;a.push(t)}return a},set:function(e,t){for(var i,n,o=e.options,s=x.makeArray(t),r=o.length;r--;)((n=o[r]).selected=x.inArray(x.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(e.selectedIndex=-1),s}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},h.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),h.focusin="onfocusin"in e;var mt=/^(?:focusinfocus|focusoutblur)$/,yt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(t,i,n,o){var s,r,a,l,c,u,p,h,m=[n||g],y=d.call(t,"type")?t.type:t,w=d.call(t,"namespace")?t.namespace.split("."):[];if(r=h=a=n=n||g,3!==n.nodeType&&8!==n.nodeType&&!mt.test(y+x.event.triggered)&&(y.indexOf(".")>-1&&(w=y.split("."),y=w.shift(),w.sort()),c=y.indexOf(":")<0&&"on"+y,(t=t[x.expando]?t:new x.Event(y,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=w.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+w.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),i=null==i?[t]:x.makeArray(i,[t]),p=x.event.special[y]||{},o||!p.trigger||!1!==p.trigger.apply(n,i))){if(!o&&!p.noBubble&&!v(n)){for(l=p.delegateType||y,mt.test(l+y)||(r=r.parentNode);r;r=r.parentNode)m.push(r),a=r;a===(n.ownerDocument||g)&&m.push(a.defaultView||a.parentWindow||e)}for(s=0;(r=m[s++])&&!t.isPropagationStopped();)h=r,t.type=s>1?l:p.bindType||y,(u=(V.get(r,"events")||Object.create(null))[t.type]&&V.get(r,"handle"))&&u.apply(r,i),(u=c&&r[c])&&u.apply&&F(r)&&(t.result=u.apply(r,i),!1===t.result&&t.preventDefault());return t.type=y,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),i)||!F(n)||c&&f(n[y])&&!v(n)&&((a=n[c])&&(n[c]=null),x.event.triggered=y,t.isPropagationStopped()&&h.addEventListener(y,yt),n[y](),t.isPropagationStopped()&&h.removeEventListener(y,yt),x.event.triggered=void 0,a&&(n[c]=a)),t.result}},simulate:function(e,t,i){var n=x.extend(new x.Event,i,{type:e,isSimulated:!0});x.event.trigger(n,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each((function(){x.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var i=this[0];if(i)return x.event.trigger(e,t,i,!0)}}),h.focusin||x.each({focus:"focusin",blur:"focusout"},(function(e,t){var i=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var n=this.ownerDocument||this.document||this,o=V.access(n,t);o||n.addEventListener(e,i,!0),V.access(n,t,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,o=V.access(n,t)-1;o?V.access(n,t,o):(n.removeEventListener(e,i,!0),V.remove(n,t))}}}));var wt=e.location,xt={guid:Date.now()},bt=/\?/;x.parseXML=function(t){var i,n;if(!t||"string"!=typeof t)return null;try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){}return n=i&&i.getElementsByTagName("parsererror")[0],i&&!n||x.error("Invalid XML: "+(n?x.map(n.childNodes,(function(e){return e.textContent})).join("\n"):t)),i};var St=/\[\]$/,Tt=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;function Et(e,t,i,n){var o;if(Array.isArray(t))x.each(t,(function(t,o){i||St.test(e)?n(e,o):Et(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,i,n)}));else if(i||"object"!==w(t))n(e,t);else for(o in t)Et(e+"["+o+"]",t[o],i,n)}x.param=function(e,t){var i,n=[],o=function(e,t){var i=f(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,(function(){o(this.name,this.value)}));else for(i in e)Et(i,e[i],t,o);return n.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Ct.test(this.nodeName)&&!kt.test(e)&&(this.checked||!pe.test(e))})).map((function(e,t){var i=x(this).val();return null==i?null:Array.isArray(i)?x.map(i,(function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}})):{name:t.name,value:i.replace(Tt,"\r\n")}})).get()}});var At=/%20/g,$t=/#.*$/,Pt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Dt=/^(?:GET|HEAD)$/,Lt=/^\/\//,Ot={},jt={},Mt="*/".concat("*"),Nt=g.createElement("a");function zt(e){return function(t,i){"string"!=typeof t&&(i=t,t="*");var n,o=0,s=t.toLowerCase().match(j)||[];if(f(i))for(;n=s[o++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(i)):(e[n]=e[n]||[]).push(i)}}function qt(e,t,i,n){var o={},s=e===jt;function r(a){var l;return o[a]=!0,x.each(e[a]||[],(function(e,a){var c=a(t,i,n);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),r(c),!1)})),l}return r(t.dataTypes[0])||!o["*"]&&r("*")}function It(e,t){var i,n,o=x.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((o[i]?e:n||(n={}))[i]=t[i]);return n&&x.extend(!0,e,n),e}Nt.href=wt.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?It(It(e,x.ajaxSettings),t):It(x.ajaxSettings,e)},ajaxPrefilter:zt(Ot),ajaxTransport:zt(jt),ajax:function(t,i){"object"==typeof t&&(i=t,t=void 0),i=i||{};var n,o,s,r,a,l,c,d,u,p,h=x.ajaxSetup({},i),f=h.context||h,v=h.context&&(f.nodeType||f.jquery)?x(f):x.event,m=x.Deferred(),y=x.Callbacks("once memory"),w=h.statusCode||{},b={},S={},T="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(c){if(!r)for(r={};t=Ht.exec(s);)r[t[1].toLowerCase()+" "]=(r[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=r[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=S[e.toLowerCase()]=S[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)k.always(e[k.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),C(0,t),this}};if(m.promise(k),h.url=((t||h.url||wt.href)+"").replace(Lt,wt.protocol+"//"),h.type=i.method||i.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(j)||[""],null==h.crossDomain){l=g.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Nt.protocol+"//"+Nt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=x.param(h.data,h.traditional)),qt(Ot,h,i,k),c)return k;for(u in(d=x.event&&h.global)&&0==x.active++&&x.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Dt.test(h.type),o=h.url.replace($t,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(p=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(bt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Pt,"$1"),p=(bt.test(o)?"&":"?")+"_="+xt.guid+++p),h.url=o+p),h.ifModified&&(x.lastModified[o]&&k.setRequestHeader("If-Modified-Since",x.lastModified[o]),x.etag[o]&&k.setRequestHeader("If-None-Match",x.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||i.contentType)&&k.setRequestHeader("Content-Type",h.contentType),k.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Mt+"; q=0.01":""):h.accepts["*"]),h.headers)k.setRequestHeader(u,h.headers[u]);if(h.beforeSend&&(!1===h.beforeSend.call(f,k,h)||c))return k.abort();if(T="abort",y.add(h.complete),k.done(h.success),k.fail(h.error),n=qt(jt,h,i,k)){if(k.readyState=1,d&&v.trigger("ajaxSend",[k,h]),c)return k;h.async&&h.timeout>0&&(a=e.setTimeout((function(){k.abort("timeout")}),h.timeout));try{c=!1,n.send(b,C)}catch(e){if(c)throw e;C(-1,e)}}else C(-1,"No Transport");function C(t,i,r,l){var u,p,g,b,S,T=i;c||(c=!0,a&&e.clearTimeout(a),n=void 0,s=l||"",k.readyState=t>0?4:0,u=t>=200&&t<300||304===t,r&&(b=function(e,t,i){for(var n,o,s,r,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||e.converters[o+" "+l[0]]){s=o;break}r||(r=o)}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(h,k,r)),!u&&x.inArray("script",h.dataTypes)>-1&&x.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),b=function(e,t,i,n){var o,s,r,a,l,c={},d=e.dataTypes.slice();if(d[1])for(r in e.converters)c[r.toLowerCase()]=e.converters[r];for(s=d.shift();s;)if(e.responseFields[s]&&(i[e.responseFields[s]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if((a=o.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&e.throws)t=r(t);else try{t=r(t)}catch(e){return{state:"parsererror",error:r?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(h,b,k,u),u?(h.ifModified&&((S=k.getResponseHeader("Last-Modified"))&&(x.lastModified[o]=S),(S=k.getResponseHeader("etag"))&&(x.etag[o]=S)),204===t||"HEAD"===h.type?T="nocontent":304===t?T="notmodified":(T=b.state,p=b.data,u=!(g=b.error))):(g=T,!t&&T||(T="error",t<0&&(t=0))),k.status=t,k.statusText=(i||T)+"",u?m.resolveWith(f,[p,T,k]):m.rejectWith(f,[k,T,g]),k.statusCode(w),w=void 0,d&&v.trigger(u?"ajaxSuccess":"ajaxError",[k,h,u?p:g]),y.fireWith(f,[k,T]),d&&(v.trigger("ajaxComplete",[k,h]),--x.active||x.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,i){return x.get(e,t,i,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],(function(e,t){x[t]=function(e,i,n,o){return f(i)&&(o=o||n,n=i,i=void 0),x.ajax(x.extend({url:e,type:t,dataType:o,data:i,success:n},x.isPlainObject(e)&&e))}})),x.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),x._evalUrl=function(e,t,i){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){x.globalEval(e,t,i)}})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(f(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return f(e)?this.each((function(t){x(this).wrapInner(e.call(this,t))})):this.each((function(){var t=x(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)}))},wrap:function(e){var t=f(e);return this.each((function(i){x(this).wrapAll(t?e.call(this,i):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Xt={0:200,1223:204},Wt=x.ajaxSettings.xhr();h.cors=!!Wt&&"withCredentials"in Wt,h.ajax=Wt=!!Wt,x.ajaxTransport((function(t){var i,n;if(h.cors||Wt&&!t.crossDomain)return{send:function(o,s){var r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];for(r in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(r,o[r]);i=function(e){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Xt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=a.ontimeout=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout((function(){i&&n()}))},i=i("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(i)throw e}},abort:function(){i&&i()}}})),x.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),x.ajaxTransport("script",(function(e){var t,i;if(e.crossDomain||e.scriptAttrs)return{send:function(n,o){t=x("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&o("error"===e.type?404:200,e.type)}),g.head.appendChild(t[0])},abort:function(){i&&i()}}}));var _t,Yt=[],Rt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||x.expando+"_"+xt.guid++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",(function(t,i,n){var o,s,r,a=!1!==t.jsonp&&(Rt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Rt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=f(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Rt,"$1"+o):!1!==t.jsonp&&(t.url+=(bt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return r||x.error(o+" was not called"),r[0]},t.dataTypes[0]="json",s=e[o],e[o]=function(){r=arguments},n.always((function(){void 0===s?x(e).removeProp(o):e[o]=s,t[o]&&(t.jsonpCallback=i.jsonpCallback,Yt.push(o)),r&&f(s)&&s(r[0]),r=s=void 0})),"script"})),h.createHTMLDocument=((_t=g.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===_t.childNodes.length),x.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(h.createHTMLDocument?((n=(t=g.implementation.createHTMLDocument("")).createElement("base")).href=g.location.href,t.head.appendChild(n)):t=g),s=!i&&[],(o=A.exec(e))?[t.createElement(o[1])]:(o=we([e],t,s),s&&s.length&&x(s).remove(),x.merge([],o.childNodes)));var n,o,s},x.fn.load=function(e,t,i){var n,o,s,r=this,a=e.indexOf(" ");return a>-1&&(n=ht(e.slice(a)),e=e.slice(0,a)),f(t)?(i=t,t=void 0):t&&"object"==typeof t&&(o="POST"),r.length>0&&x.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){s=arguments,r.html(n?x("<div>").append(x.parseHTML(e)).find(n):e)})).always(i&&function(e,t){r.each((function(){i.apply(this,s||[e.responseText,t,e])}))}),this},x.expr.pseudos.animated=function(e){return x.grep(x.timers,(function(t){return e===t.elem})).length},x.offset={setOffset:function(e,t,i){var n,o,s,r,a,l,c=x.css(e,"position"),d=x(e),u={};"static"===c&&(e.style.position="relative"),a=d.offset(),s=x.css(e,"top"),l=x.css(e,"left"),("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1?(r=(n=d.position()).top,o=n.left):(r=parseFloat(s)||0,o=parseFloat(l)||0),f(t)&&(t=t.call(e,i,x.extend({},a))),null!=t.top&&(u.top=t.top-a.top+r),null!=t.left&&(u.left=t.left-a.left+o),"using"in t?t.using.call(e,u):d.css(u)}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){x.offset.setOffset(this,e,t)}));var t,i,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],o={top:0,left:0};if("fixed"===x.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((o=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),o.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-x.css(n,"marginTop",!0),left:t.left-o.left-x.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||ie}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var i="pageYOffset"===t;x.fn[e]=function(n){return W(this,(function(e,n,o){var s;if(v(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===o)return s?s[t]:e[n];s?s.scrollTo(i?s.pageXOffset:o,i?o:s.pageYOffset):e[n]=o}),e,n,arguments.length)}})),x.each(["top","left"],(function(e,t){x.cssHooks[t]=We(h.pixelPosition,(function(e,i){if(i)return i=Xe(e,t),Ne.test(i)?x(e).position()[t]+"px":i}))})),x.each({Height:"height",Width:"width"},(function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},(function(i,n){x.fn[n]=function(o,s){var r=arguments.length&&(i||"boolean"!=typeof o),a=i||(!0===o||!0===s?"margin":"border");return W(this,(function(t,i,o){var s;return v(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===o?x.css(t,i,a):x.style(t,i,o,a)}),t,r?o:void 0,r)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){x.fn[t]=function(e){return this.on(t,e)}})),x.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){x.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}}));var Bt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(e,t){var i,n,s;if("string"==typeof t&&(i=e[t],t=e,e=i),f(e))return n=o.call(arguments,2),(s=function(){return e.apply(t||this,n.concat(o.call(arguments)))}).guid=e.guid=e.guid||x.guid++,s},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=E,x.isFunction=f,x.isWindow=v,x.camelCase=B,x.type=w,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},x.trim=function(e){return null==e?"":(e+"").replace(Bt,"")},"function"==typeof define&&define.amd&&define("jquery",[],(function(){return x}));var Ft=e.jQuery,Ut=e.$;return x.noConflict=function(t){return e.$===x&&(e.$=Ut),t&&e.jQuery===x&&(e.jQuery=Ft),x},void 0===t&&(e.jQuery=e.$=x),x})),
/*!
 * fullPage 2.9.7
 * https://github.com/alvarotrigo/fullPage.js
 * @license MIT licensed
 *
 * Copyright (C) 2015 alvarotrigo.com - A project by Alvaro Trigo
 */
function(e,t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],(function(i){return t(i,e,e.document,e.Math)})):"object"==typeof exports&&exports?module.exports=t(require("jquery"),e,e.document,e.Math):t(jQuery,e,e.document,e.Math)}("undefined"!=typeof window?window:this,(function(e,t,i,n,o){"use strict";var s="active",r="fp-completely",a=".fp-section",l=a+".active",c=e(t),d=e(i);e.fn.fullpage=function(u){if(e("html").hasClass("fp-enabled"))ht();else{var p=e("html, body"),h=e("body"),f=e.fn.fullpage;u=e.extend({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:e.fn.fp_scrolloverflow?e.fn.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,normalScrollElementTouchThreshold:5,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},sectionSelector:".section",slideSelector:".slide",afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},u);var v,g,m,y,w=!1,x=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),b="ontouchstart"in t||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,S=e(this),T=c.height(),k=!1,C=!0,E=!0,A=[],$={m:{up:!0,down:!0,left:!0,right:!0}};$.k=e.extend(!0,{},$.m);var P,H,D,L,O,j,M,N=function(){var e;e=t.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"};return e}(),z={touchmove:"ontouchmove"in t?"touchmove":N.move,touchstart:"ontouchstart"in t?"touchstart":N.down},q=e.extend(!0,{},u);ht(),e.extend(e.easing,{easeInOutCubic:function(e,t,i,n,o){return(t/=o/2)<1?n/2*t*t*t+i:n/2*((t-=2)*t*t+2)+i}}),e(this).length&&(f.version="2.9.6",f.setAutoScrolling=K,f.setRecordHistory=G,f.setScrollingSpeed=Q,f.setFitToSection=J,f.setLockAnchors=function(e){u.lockAnchors=e},f.setMouseWheelScrolling=Z,f.setAllowScrolling=ee,f.setKeyboardScrolling=te,f.moveSectionUp=ie,f.moveSectionDown=ne,f.silentMoveTo=oe,f.moveTo=se,f.moveSlideRight=re,f.moveSlideLeft=ae,f.fitToSection=pe,f.reBuild=le,f.setResponsive=ce,f.destroy=function(t){K(!1,"internal"),ee(!1),te(!1),S.addClass("fp-destroyed"),clearTimeout(L),clearTimeout(D),clearTimeout(H),clearTimeout(O),clearTimeout(j),c.off("scroll",ue).off("hashchange",De).off("resize",Be),d.off("keydown",Oe).off("keyup",Me).off("click touchstart","#fp-nav a").off("mouseenter","#fp-nav li").off("mouseleave","#fp-nav li").off("click touchstart",".fp-slidesNav a").off("mouseover",u.normalScrollElements).off("mouseout",u.normalScrollElements),e(a).off("click touchstart",".fp-controlArrow"),clearTimeout(L),clearTimeout(D),t&&function(){ct(0),S.find("img[data-src], source[data-src], audio[data-src], iframe[data-src]").each((function(){ke(e(this),"src")})),S.find("img[data-srcset]").each((function(){ke(e(this),"srcset")})),e("#fp-nav, .fp-slidesNav, .fp-controlArrow").remove(),e(a).css({height:"","background-color":"",padding:""}),e(".fp-slide").css({width:""}),S.css({height:"",position:"","-ms-touch-action":"","touch-action":""}),p.css({overflow:"",height:""}),e("html").removeClass("fp-enabled"),h.removeClass("fp-responsive"),e.each(h.get(0).className.split(/\s+/),(function(e,t){0===t.indexOf("fp-viewing")&&h.removeClass(t)})),e(a+", .fp-slide").each((function(){u.scrollOverflowHandler&&u.scrollOverflowHandler.remove(e(this)),e(this).removeClass("fp-table "+s),e(this).attr("style",e(this).data("fp-styles"))})),Ve(S),S.find(".fp-tableCell, .fp-slidesContainer, .fp-slides").each((function(){e(this).replaceWith(this.childNodes)})),S.css({"-webkit-transition":"none",transition:"none"}),p.scrollTop(0);var t=["fp-section","fp-slide","fp-slidesContainer"];e.each(t,(function(t,i){e("."+i).removeClass(i)}))}()},f.shared={afterRenderActions:de},function(){u.css3&&(u.css3=function(){var e,n=i.createElement("p"),s={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var r in i.body.insertBefore(n,null),s)n.style[r]!==o&&(n.style[r]="translate3d(1px,1px,1px)",e=t.getComputedStyle(n).getPropertyValue(s[r]));return i.body.removeChild(n),e!==o&&e.length>0&&"none"!==e}());u.scrollBar=u.scrollBar||u.hybrid,function(){var t=S.find(u.sectionSelector);u.anchors.length||(u.anchors=t.filter("[data-anchor]").map((function(){return e(this).data("anchor").toString()})).get());u.navigationTooltips.length||(u.navigationTooltips=t.filter("[data-tooltip]").map((function(){return e(this).data("tooltip").toString()})).get())}(),function(){S.css({height:"100%",position:"relative"}),S.addClass("fullpage-wrapper"),e("html").addClass("fp-enabled"),T=c.height(),S.removeClass("fp-destroyed"),S.find(u.sectionSelector).addClass("fp-section"),void S.find(u.slideSelector).addClass("fp-slide"),e(a).each((function(t){var i=e(this),n=i.find(".fp-slide"),o=n.length;i.data("fp-styles",i.attr("style")),function(t,i){i||0!==e(l).length||t.addClass(s);y=e(l),t.css("height",T+"px"),u.paddingTop&&t.css("padding-top",u.paddingTop);u.paddingBottom&&t.css("padding-bottom",u.paddingBottom);void 0!==u.sectionsColor[i]&&t.css("background-color",u.sectionsColor[i]);void 0!==u.anchors[i]&&t.attr("data-anchor",u.anchors[i])}(i,t),function(t,i){void 0!==u.anchors[i]&&t.hasClass(s)&&Ke(u.anchors[i],i);u.menu&&u.css3&&e(u.menu).closest(".fullpage-wrapper").length&&e(u.menu).appendTo(h)}(i,t),o>0?function(t,i,n){var o=100*n,r=100/n;i.wrapAll('<div class="fp-slidesContainer" />'),i.parent().wrap('<div class="fp-slides" />'),t.find(".fp-slidesContainer").css("width",o+"%"),n>1&&(u.controlArrows&&function(e){e.find(".fp-slides").after('<div class="fp-controlArrow fp-prev"></div><div class="fp-controlArrow fp-next"></div>'),"#fff"!=u.controlArrowColor&&(e.find(".fp-controlArrow.fp-next").css("border-color","transparent transparent transparent "+u.controlArrowColor),e.find(".fp-controlArrow.fp-prev").css("border-color","transparent "+u.controlArrowColor+" transparent transparent"));u.loopHorizontal||e.find(".fp-controlArrow.fp-prev").hide()}(t),u.slidesNavigation&&function(e,t){e.append('<div class="fp-slidesNav"><ul></ul></div>');var i=e.find(".fp-slidesNav");i.addClass(u.slidesNavPosition);for(var n=0;n<t;n++)i.find("ul").append('<li><a href="#"><span></span></a></li>');i.css("margin-left","-"+i.width()/2+"px"),i.find("li").first().find("a").addClass(s)}(t,n));i.each((function(t){e(this).css("width",r+"%"),u.verticalCentered&&Qe(e(this))}));var c=t.find(".fp-slide.active");c.length&&(0!==e(l).index(a)||0===e(l).index(a)&&0!==c.index())?lt(c,"internal"):i.eq(0).addClass(s)}(i,n,o):u.verticalCentered&&Qe(i)})),u.fixedElements&&u.css3&&e(u.fixedElements).appendTo(h);u.navigation&&function(){h.append('<div id="fp-nav"><ul></ul></div>');var t=e("#fp-nav");t.addClass((function(){return u.showActiveTooltip?"fp-show-active "+u.navigationPosition:u.navigationPosition}));for(var i=0;i<e(a).length;i++){var n="";u.anchors.length&&(n=u.anchors[i]);var o='<li><a href="#'+n+'"><span></span></a>',r=u.navigationTooltips[i];void 0!==r&&""!==r&&(o+='<div class="fp-tooltip '+u.navigationPosition+'">'+r+"</div>"),o+="</li>",t.find("ul").append(o)}e("#fp-nav").css("margin-top","-"+e("#fp-nav").height()/2+"px"),e("#fp-nav").find("li").eq(e(l).index(a)).find("a").addClass(s)}();void S.find('iframe[src*="youtube.com/embed/"]').each((function(){var t,i,n;t=e(this),i="enablejsapi=1",n=t.attr("src"),t.attr("src",n+(/\?/.test(n)?"&":"?")+i)})),u.scrollOverflow?P=u.scrollOverflowHandler.init(u):de()}(),ee(!0),K(u.autoScrolling,"internal"),Fe(),rt(),"complete"===i.readyState&&He();c.on("load",He)}(),c.on("scroll",ue).on("hashchange",De).blur(Ie).resize(Be),d.keydown(Oe).keyup(Me).on("click touchstart","#fp-nav a",Xe).on("click touchstart",".fp-slidesNav a",We).on("click",".fp-tooltip",je),e(a).on("click touchstart",".fp-controlArrow",qe),u.normalScrollElements&&(d.on("mouseenter touchstart",u.normalScrollElements,(function(){ee(!1)})),d.on("mouseleave touchend",u.normalScrollElements,(function(){ee(!0)}))));var I=!1,X=0,W=0,_=0,Y=0,R=0,B=(new Date).getTime(),F=0,U=0,V=T}function K(t,i){t||ct(0),pt("autoScrolling",t,i);var n=e(l);u.autoScrolling&&!u.scrollBar?(p.css({overflow:"hidden",height:"100%"}),G(q.recordHistory,"internal"),S.css({"-ms-touch-action":"none","touch-action":"none"}),n.length&&ct(n.position().top)):(p.css({overflow:"visible",height:"initial"}),G(!1,"internal"),S.css({"-ms-touch-action":"","touch-action":""}),n.length&&p.scrollTop(n.position().top))}function G(e,t){pt("recordHistory",e,t)}function Q(e,t){pt("scrollingSpeed",e,t)}function J(e,t){pt("fitToSection",e,t)}function Z(e){e?(!function(){var e,n="";t.addEventListener?e="addEventListener":(e="attachEvent",n="on");var s="onwheel"in i.createElement("div")?"wheel":i.onmousewheel!==o?"mousewheel":"DOMMouseScroll";"DOMMouseScroll"==s?i[e](n+"MozMousePixelScroll",we,!1):i[e](n+s,we,!1)}(),S.on("mousedown",Ne).on("mouseup",ze)):(i.addEventListener?(i.removeEventListener("mousewheel",we,!1),i.removeEventListener("wheel",we,!1),i.removeEventListener("MozMousePixelScroll",we,!1)):i.detachEvent("onmousewheel",we),S.off("mousedown",Ne).off("mouseup",ze))}function ee(t,i){void 0!==i?(i=i.replace(/ /g,"").split(","),e.each(i,(function(e,i){ut(t,i,"m")}))):(ut(t,"all","m"),t?(Z(!0),(x||b)&&(u.autoScrolling&&h.off(z.touchmove).on(z.touchmove,fe),e(".fullpage-wrapper").off(z.touchstart).on(z.touchstart,me).off(z.touchmove).on(z.touchmove,ve))):(Z(!1),(x||b)&&(u.autoScrolling&&h.off(z.touchmove),e(".fullpage-wrapper").off(z.touchstart).off(z.touchmove))))}function te(t,i){void 0!==i?(i=i.replace(/ /g,"").split(","),e.each(i,(function(e,i){ut(t,i,"k")}))):(ut(t,"all","k"),u.keyboardScrolling=t)}function ie(){var t=e(l).prev(a);t.length||!u.loopTop&&!u.continuousVertical||(t=e(a).last()),t.length&&Se(t,null,!0)}function ne(){var t=e(l).next(a);t.length||!u.loopBottom&&!u.continuousVertical||(t=e(a).first()),t.length&&Se(t,null,!1)}function oe(e,t){Q(0,"internal"),se(e,t),Q(q.scrollingSpeed,"internal")}function se(e,t){var i=et(e);void 0!==t?tt(e,t):i.length>0&&Se(i)}function re(e){xe("right",e)}function ae(e){xe("left",e)}function le(t){if(!S.hasClass("fp-destroyed")){k=!0,T=c.height(),e(a).each((function(){var t=e(this).find(".fp-slides"),i=e(this).find(".fp-slide");u.verticalCentered&&e(this).find(".fp-tableCell").css("height",Je(e(this))+"px"),e(this).css("height",T+"px"),i.length>1&&Ye(t,t.find(".fp-slide.active"))})),u.scrollOverflow&&P.createScrollBarForAll();var i=e(l).index(a);i&&oe(i+1),k=!1,e.isFunction(u.afterResize)&&t&&u.afterResize.call(S),e.isFunction(u.afterReBuild)&&!t&&u.afterReBuild.call(S)}}function ce(t){var i=h.hasClass("fp-responsive");t?i||(K(!1,"internal"),J(!1,"internal"),e("#fp-nav").hide(),h.addClass("fp-responsive"),e.isFunction(u.afterResponsive)&&u.afterResponsive.call(S,t)):i&&(K(q.autoScrolling,"internal"),J(q.autoScrolling,"internal"),e("#fp-nav").show(),h.removeClass("fp-responsive"),e.isFunction(u.afterResponsive)&&u.afterResponsive.call(S,t))}function de(){var t,i=e(l);i.addClass(r),Ce(i),Ee(i),u.scrollOverflow&&u.scrollOverflowHandler.afterLoad(),(!(t=et(Le().section))||t.length&&t.index()===y.index())&&e.isFunction(u.afterLoad)&&u.afterLoad.call(i,i.data("anchor"),i.index(a)+1),e.isFunction(u.afterRender)&&u.afterRender.call(S)}function ue(){var t;if(!u.autoScrolling||u.scrollBar){var n=c.scrollTop(),o=function(e){var t=e>X?"down":"up";return X=e,F=e,t}(n),d=0,p=n+c.height()/2,f=h.height()-c.height()===n,g=i.querySelectorAll(a);if(f)d=g.length-1;else if(n)for(var m=0;m<g.length;++m){g[m].offsetTop<=p&&(d=m)}else d=0;if(function(t){var i=e(l).position().top,n=i+c.height();if("up"==t)return n>=c.scrollTop()+c.height();return i<=c.scrollTop()}(o)&&(e(l).hasClass(r)||e(l).addClass(r).siblings().removeClass(r)),!(t=e(g).eq(d)).hasClass(s)){I=!0;var y,w,x=e(l),b=x.index(a)+1,S=Ge(t),k=t.data("anchor"),C=t.index(a)+1,A=t.find(".fp-slide.active");A.length&&(w=A.data("anchor"),y=A.index()),E&&(t.addClass(s).siblings().removeClass(s),e.isFunction(u.onLeave)&&u.onLeave.call(x,b,C,S),e.isFunction(u.afterLoad)&&u.afterLoad.call(t,k,C),$e(x),Ce(t),Ee(t),Ke(k,C-1),u.anchors.length&&(v=k),nt(y,w,k,C)),clearTimeout(O),O=setTimeout((function(){I=!1}),100)}u.fitToSection&&(clearTimeout(j),j=setTimeout((function(){u.fitToSection&&e(l).outerHeight()<=T&&pe()}),u.fitToSectionDelay))}}function pe(){E&&(k=!0,Se(e(l)),k=!1)}function he(t){if($.m[t]){var i="down"===t?ne:ie;if(u.scrollOverflow){var n=u.scrollOverflowHandler.scrollable(e(l)),o="down"===t?"bottom":"top";if(n.length>0){if(!u.scrollOverflowHandler.isScrolled(o,n))return!0;i()}else i()}else i()}}function fe(e){var t=e.originalEvent;u.autoScrolling&&ge(t)&&e.preventDefault()}function ve(t){var i=t.originalEvent,o=e(i.target).closest(a);if(ge(i)){u.autoScrolling&&t.preventDefault();var s=at(i);Y=s.y,R=s.x,o.find(".fp-slides").length&&n.abs(_-R)>n.abs(W-Y)?!w&&n.abs(_-R)>c.outerWidth()/100*u.touchSensitivity&&(_>R?$.m.right&&re(o):$.m.left&&ae(o)):u.autoScrolling&&E&&n.abs(W-Y)>c.height()/100*u.touchSensitivity&&(W>Y?he("down"):Y>W&&he("up"))}}function ge(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function me(e){var t=e.originalEvent;if(u.fitToSection&&p.stop(),ge(t)){var i=at(t);W=i.y,_=i.x}}function ye(e,t){for(var i=0,o=e.slice(n.max(e.length-t,1)),s=0;s<o.length;s++)i+=o[s];return n.ceil(i/t)}function we(i){var o=(new Date).getTime(),s=e(".fp-completely").hasClass("fp-normal-scroll");if(u.autoScrolling&&!m&&!s){var r=(i=i||t.event).wheelDelta||-i.deltaY||-i.detail,a=n.max(-1,n.min(1,r)),l=void 0!==i.wheelDeltaX||void 0!==i.deltaX,c=n.abs(i.wheelDeltaX)<n.abs(i.wheelDelta)||n.abs(i.deltaX)<n.abs(i.deltaY)||!l;A.length>149&&A.shift(),A.push(n.abs(r)),u.scrollBar&&(i.preventDefault?i.preventDefault():i.returnValue=!1);var d=o-B;if(B=o,d>200&&(A=[]),E)ye(A,10)>=ye(A,70)&&c&&he(a<0?"down":"up");return!1}u.fitToSection&&p.stop()}function xe(t,i){var n=(void 0===i?e(l):i).find(".fp-slides"),o=n.find(".fp-slide").length;if(!(!n.length||w||o<2)){var s=n.find(".fp-slide.active"),r=null;if(!(r="left"===t?s.prev(".fp-slide"):s.next(".fp-slide")).length){if(!u.loopHorizontal)return;r="left"===t?s.siblings(":last"):s.siblings(":first")}w=!0,Ye(n,r,t)}}function be(){e(".fp-slide.active").each((function(){lt(e(this),"internal")}))}function Se(t,i,o){if(void 0!==t){var r,d,p=function(e){var t=e.position(),i=t.top,n=t.top>F,o=i-T+e.outerHeight(),s=u.bigSectionsDestination;return e.outerHeight()>T?(n||s)&&"bottom"!==s||(i=o):(n||k&&e.is(":last-child"))&&(i=o),F=i,i}(t),h={element:t,callback:i,isMovementUp:o,dtop:p,yMovement:Ge(t),anchorLink:t.data("anchor"),sectionIndex:t.index(a),activeSlide:t.find(".fp-slide.active"),activeSection:e(l),leavingSection:e(l).index(a)+1,localIsResizing:k};if(!(h.activeSection.is(t)&&!k||u.scrollBar&&c.scrollTop()===h.dtop&&!t.hasClass("fp-auto-height"))){if(h.activeSlide.length&&(r=h.activeSlide.data("anchor"),d=h.activeSlide.index()),e.isFunction(u.onLeave)&&!h.localIsResizing){var f=h.yMovement;if(void 0!==o&&(f=o?"up":"down"),!1===u.onLeave.call(h.activeSection,h.leavingSection,h.sectionIndex+1,f))return}u.autoScrolling&&u.continuousVertical&&void 0!==h.isMovementUp&&(!h.isMovementUp&&"up"==h.yMovement||h.isMovementUp&&"down"==h.yMovement)&&(h=function(t){t.isMovementUp?e(l).before(t.activeSection.nextAll(a)):e(l).after(t.activeSection.prevAll(a).get().reverse());return ct(e(l).position().top),be(),t.wrapAroundElements=t.activeSection,t.dtop=t.element.position().top,t.yMovement=Ge(t.element),t.leavingSection=t.activeSection.index(a)+1,t.sectionIndex=t.element.index(a),t}(h)),h.localIsResizing||$e(h.activeSection),u.scrollOverflow&&u.scrollOverflowHandler.beforeLeave(),t.addClass(s).siblings().removeClass(s),Ce(t),u.scrollOverflow&&u.scrollOverflowHandler.onLeave(),E=!1,nt(d,r,h.anchorLink,h.sectionIndex),function(t){if(u.css3&&u.autoScrolling&&!u.scrollBar){Ze("translate3d(0px, -"+n.round(t.dtop)+"px, 0px)",!0),u.scrollingSpeed?(clearTimeout(D),D=setTimeout((function(){Te(t)}),u.scrollingSpeed)):Te(t)}else{var i=function(e){var t={};u.autoScrolling&&!u.scrollBar?(t.options={top:-e.dtop},t.element=".fullpage-wrapper"):(t.options={scrollTop:e.dtop},t.element="html, body");return t}(t);e(i.element).animate(i.options,u.scrollingSpeed,u.easing).promise().done((function(){u.scrollBar?setTimeout((function(){Te(t)}),30):Te(t)}))}}(h),v=h.anchorLink,Ke(h.anchorLink,h.sectionIndex)}}}function Te(t){!function(t){t.wrapAroundElements&&t.wrapAroundElements.length&&(t.isMovementUp?e(".fp-section:first").before(t.wrapAroundElements):e(".fp-section:last").after(t.wrapAroundElements),ct(e(l).position().top),be())}(t),e.isFunction(u.afterLoad)&&!t.localIsResizing&&u.afterLoad.call(t.element,t.anchorLink,t.sectionIndex+1),u.scrollOverflow&&u.scrollOverflowHandler.afterLoad(),t.localIsResizing||Ee(t.element),t.element.addClass(r).siblings().removeClass(r),E=!0,e.isFunction(t.callback)&&t.callback.call(this)}function ke(e,t){e.attr(t,e.data(t)).removeAttr("data-"+t)}function Ce(t){var i;u.lazyLoading&&Pe(t).find("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]").each((function(){if(i=e(this),e.each(["src","srcset"],(function(e,t){var n=i.attr("data-"+t);void 0!==n&&n&&ke(i,t)})),i.is("source")){var t=i.closest("video").length?"video":"audio";i.closest(t).get(0).load()}}))}function Ee(t){var i=Pe(t);i.find("video, audio").each((function(){var t=e(this).get(0);t.hasAttribute("data-autoplay")&&"function"==typeof t.play&&t.play()})),i.find('iframe[src*="youtube.com/embed/"]').each((function(){var t=e(this).get(0);t.hasAttribute("data-autoplay")&&Ae(t),t.onload=function(){t.hasAttribute("data-autoplay")&&Ae(t)}}))}function Ae(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function $e(t){var i=Pe(t);i.find("video, audio").each((function(){var t=e(this).get(0);t.hasAttribute("data-keepplaying")||"function"!=typeof t.pause||t.pause()})),i.find('iframe[src*="youtube.com/embed/"]').each((function(){var t=e(this).get(0);/youtube\.com\/embed\//.test(e(this).attr("src"))&&!t.hasAttribute("data-keepplaying")&&e(this).get(0).contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")}))}function Pe(t){var i=t.find(".fp-slide.active");return i.length&&(t=e(i)),t}function He(){var e=Le(),t=e.section,i=e.slide;t&&(u.animateAnchor?tt(t,i):oe(t,i))}function De(){if(!I&&!u.lockAnchors){var e=Le(),t=e.section,i=e.slide,n=void 0===v,o=void 0===v&&void 0===i&&!w;t&&t.length&&(t&&t!==v&&!n||o||!w&&g!=i)&&tt(t,i)}}function Le(){var e,i,n=t.location.hash;if(n.length){var o=n.replace("#","").split("/"),s=n.indexOf("#/")>-1;e=s?"/"+o[1]:decodeURIComponent(o[0]);var r=s?o[2]:o[1];r&&r.length&&(i=decodeURIComponent(r))}return{section:e,slide:i}}function Oe(t){clearTimeout(M);var i=e(":focus"),n=t.which;if(9===n)!function(t){var i=t.shiftKey,n=e(":focus"),o=e(l),s=o.find(".fp-slide.active"),r=(s.length?s:o).find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]').not('[tabindex="-1"]');function a(e){return e.preventDefault(),r.first().focus()}n.length?n.closest(l,".fp-slide.active").length||(n=a(t)):a(t);(!i&&n.is(r.last())||i&&n.is(r.first()))&&t.preventDefault()}(t);else if(!i.is("textarea")&&!i.is("input")&&!i.is("select")&&"true"!==i.attr("contentEditable")&&""!==i.attr("contentEditable")&&u.keyboardScrolling&&u.autoScrolling){e.inArray(n,[40,38,32,33,34])>-1&&t.preventDefault(),m=t.ctrlKey,M=setTimeout((function(){!function(t){var i=t.shiftKey;if(!E&&[37,39].indexOf(t.which)<0)return;switch(t.which){case 38:case 33:$.k.up&&ie();break;case 32:if(i&&$.k.up){ie();break}case 40:case 34:$.k.down&&ne();break;case 36:$.k.up&&se(1);break;case 35:$.k.down&&se(e(a).length);break;case 37:$.k.left&&ae();break;case 39:$.k.right&&re();break;default:;}}(t)}),150)}}function je(){e(this).prev().trigger("click")}function Me(e){C&&(m=e.ctrlKey)}function Ne(e){2==e.which&&(U=e.pageY,S.on("mousemove",_e))}function ze(e){2==e.which&&S.off("mousemove")}function qe(){var t=e(this).closest(a);e(this).hasClass("fp-prev")?$.m.left&&ae(t):$.m.right&&re(t)}function Ie(){C=!1,m=!1}function Xe(t){t.preventDefault();var i=e(this).parent().index();Se(e(a).eq(i))}function We(t){t.preventDefault();var i=e(this).closest(a).find(".fp-slides"),n=i.find(".fp-slide").eq(e(this).closest("li").index());Ye(i,n)}function _e(e){E&&(e.pageY<U&&$.m.up?ie():e.pageY>U&&$.m.down&&ne()),U=e.pageY}function Ye(t,i,o){var r=t.closest(a),l={slides:t,destiny:i,direction:o,destinyPos:i.position(),slideIndex:i.index(),section:r,sectionIndex:r.index(a),anchorLink:r.data("anchor"),slidesNav:r.find(".fp-slidesNav"),slideAnchor:st(i),prevSlide:r.find(".fp-slide.active"),prevSlideIndex:r.find(".fp-slide.active").index(),localIsResizing:k};l.xMovement=function(e,t){if(e==t)return"none";if(e>t)return"left";return"right"}(l.prevSlideIndex,l.slideIndex),l.localIsResizing||(E=!1),u.onSlideLeave&&!l.localIsResizing&&"none"!==l.xMovement&&e.isFunction(u.onSlideLeave)&&!1===u.onSlideLeave.call(l.prevSlide,l.anchorLink,l.sectionIndex+1,l.prevSlideIndex,l.direction,l.slideIndex)?w=!1:(i.addClass(s).siblings().removeClass(s),l.localIsResizing||($e(l.prevSlide),Ce(i)),!u.loopHorizontal&&u.controlArrows&&(r.find(".fp-controlArrow.fp-prev").toggle(0!==l.slideIndex),r.find(".fp-controlArrow.fp-next").toggle(!i.is(":last-child"))),r.hasClass(s)&&!l.localIsResizing&&nt(l.slideIndex,l.slideAnchor,l.anchorLink,l.sectionIndex),function(e,t,i){var o=t.destinyPos;if(u.css3){var s="translate3d(-"+n.round(o.left)+"px, 0px, 0px)";Ue(e.find(".fp-slidesContainer")).css(dt(s)),L=setTimeout((function(){i&&Re(t)}),u.scrollingSpeed,u.easing)}else e.animate({scrollLeft:n.round(o.left)},u.scrollingSpeed,u.easing,(function(){i&&Re(t)}))}(t,l,!0))}function Re(t){var i,n;i=t.slidesNav,n=t.slideIndex,i.find(".active").removeClass(s),i.find("li").eq(n).find("a").addClass(s),t.localIsResizing||(e.isFunction(u.afterSlideLoad)&&u.afterSlideLoad.call(t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex),E=!0,Ee(t.destiny)),w=!1}function Be(){if(Fe(),x){var t=e(i.activeElement);if(!t.is("textarea")&&!t.is("input")&&!t.is("select")){var o=c.height();n.abs(o-V)>20*n.max(V,o)/100&&(le(!0),V=o)}}else clearTimeout(H),H=setTimeout((function(){le(!0)}),350)}function Fe(){var e=u.responsive||u.responsiveWidth,t=u.responsiveHeight,i=e&&c.outerWidth()<e,n=t&&c.height()<t;e&&t?ce(i||n):e?ce(i):t&&ce(n)}function Ue(e){var t="all "+u.scrollingSpeed+"ms "+u.easingcss3;return e.removeClass("fp-notransition"),e.css({"-webkit-transition":t,transition:t})}function Ve(e){return e.addClass("fp-notransition")}function Ke(t,i){var n;n=t,u.menu&&(e(u.menu).find(".active").removeClass(s),e(u.menu).find('[data-menuanchor="'+n+'"]').addClass(s)),function(t,i){u.navigation&&(e("#fp-nav").find(".active").removeClass(s),t?e("#fp-nav").find('a[href="#'+t+'"]').addClass(s):e("#fp-nav").find("li").eq(i).find("a").addClass(s))}(t,i)}function Ge(t){var i=e(l).index(a),n=t.index(a);return i==n?"none":i>n?"up":"down"}function Qe(t){if(!t.hasClass("fp-table")){var i=e('<div class="fp-tableCell" />').height(Je(t));t.addClass("fp-table").wrapInner(i)}}function Je(e){var t=T;if(u.paddingTop||u.paddingBottom){var i=e;i.hasClass("fp-section")||(i=e.closest(a));var n=parseInt(i.css("padding-top"))+parseInt(i.css("padding-bottom"));t=T-n}return t}function Ze(e,t){t?Ue(S):Ve(S),S.css(dt(e)),setTimeout((function(){S.removeClass("fp-notransition")}),10)}function et(t){var i=S.find(a+'[data-anchor="'+t+'"]');if(!i.length){var n=void 0!==t?t-1:0;i=e(a).eq(n)}return i}function tt(e,t){var i=et(e);if(i.length){var n=function(e,t){var i=t.find('.fp-slide[data-anchor="'+e+'"]');return i.length||(e=void 0!==e?e:0,i=t.find(".fp-slide").eq(e)),i}(t,i);e===v||i.hasClass(s)?it(n):Se(i,(function(){it(n)}))}}function it(e){e.length&&Ye(e.closest(".fp-slides"),e)}function nt(e,t,i,n){var o="";u.anchors.length&&!u.lockAnchors&&(e?(void 0!==i&&(o=i),void 0===t&&(t=e),g=t,ot(o+"/"+t)):void 0!==e?(g=t,ot(i)):ot(i)),rt()}function ot(e){if(u.recordHistory)location.hash=e;else if(x||b)t.history.replaceState(o,o,"#"+e);else{var i=t.location.href.split("#")[0];t.location.replace(i+"#"+e)}}function st(e){var t=e.data("anchor"),i=e.index();return void 0===t&&(t=i),t}function rt(){var t=e(l),i=t.find(".fp-slide.active"),n=st(t),o=st(i),s=String(n);i.length&&(s=s+"-"+o),s=s.replace("/","-").replace("#","");var r=new RegExp("\\b\\s?fp-viewing-[^\\s]+\\b","g");h[0].className=h[0].className.replace(r,""),h.addClass("fp-viewing-"+s)}function at(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,b&&ge(e)&&(u.scrollBar||!u.autoScrolling)&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function lt(e,t){Q(0,"internal"),void 0!==t&&(k=!0),Ye(e.closest(".fp-slides"),e),void 0!==t&&(k=!1),Q(q.scrollingSpeed,"internal")}function ct(e){var t=n.round(e);u.css3&&u.autoScrolling&&!u.scrollBar?Ze("translate3d(0px, -"+t+"px, 0px)",!1):u.autoScrolling&&!u.scrollBar?S.css("top",-t):p.scrollTop(t)}function dt(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function ut(t,i,n){"all"!==i?$[n][i]=t:e.each(Object.keys($[n]),(function(e,i){$[n][i]=t}))}function pt(e,t,i){u[e]=t,"internal"!==i&&(q[e]=t)}function ht(){e("html").hasClass("fp-enabled")?ft("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(u.continuousVertical&&(u.loopTop||u.loopBottom)&&(u.continuousVertical=!1,ft("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),u.scrollBar&&u.scrollOverflow&&ft("warn","Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox"),!u.continuousVertical||!u.scrollBar&&u.autoScrolling||(u.continuousVertical=!1,ft("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),u.scrollOverflow&&!u.scrollOverflowHandler&&(u.scrollOverflow=!1,ft("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),e.each(["fadingEffect","continuousHorizontal","scrollHorizontally","interlockedSlides","resetSliders","responsiveSlides","offsetSections","dragAndMove","scrollOverflowReset","parallax"],(function(e,t){u[t]&&ft("warn","fullpage.js extensions require jquery.fullpage.extensions.min.js file instead of the usual jquery.fullpage.js. Requested: "+t)})),e.each(u.anchors,(function(t,i){var n=d.find("[name]").filter((function(){return e(this).attr("name")&&e(this).attr("name").toLowerCase()==i.toLowerCase()})),o=d.find("[id]").filter((function(){return e(this).attr("id")&&e(this).attr("id").toLowerCase()==i.toLowerCase()}));(o.length||n.length)&&(ft("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),o.length&&ft("error",'"'+i+'" is is being used by another element `id` property'),n.length&&ft("error",'"'+i+'" is is being used by another element `name` property'))})))}function ft(e,t){console&&console[e]&&console[e]("fullPage: "+t)}}})),
/*!
* Customized version of iScroll.js 0.0.8
* It fixes bugs affecting its integration with fullpage.js
*/
/*! iScroll v5.2.0 ~ (c) 2008-2016 Matteo Spinelli ~ http://cubiq.org/license */
function(e,t,i){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(t){e.setTimeout(t,1e3/60)},o=function(){var n={},o=t.createElement("div").style,s=function(){for(var e=["t","webkitT","MozT","msT","OT"],t=0,i=e.length;t<i;t++)if(e[t]+"ransform"in o)return e[t].substr(0,e[t].length-1);return!1}();function r(e){return!1!==s&&(""===s?e:s+e.charAt(0).toUpperCase()+e.substr(1))}n.getTime=Date.now||function(){return(new Date).getTime()},n.extend=function(e,t){for(var i in t)e[i]=t[i]},n.addEvent=function(e,t,i,n){e.addEventListener(t,i,!!n)},n.removeEvent=function(e,t,i,n){e.removeEventListener(t,i,!!n)},n.prefixPointerEvent=function(t){return e.MSPointerEvent?"MSPointer"+t.charAt(7).toUpperCase()+t.substr(8):t},n.momentum=function(e,t,n,o,s,r){var a,l,c=e-t,d=i.abs(c)/n;return l=d/(r=void 0===r?6e-4:r),(a=e+d*d/(2*r)*(c<0?-1:1))<o?(a=s?o-s/2.5*(d/8):o,l=(c=i.abs(a-e))/d):a>0&&(a=s?s/2.5*(d/8):0,l=(c=i.abs(e)+a)/d),{destination:i.round(a),duration:l}};var a=r("transform");return n.extend(n,{hasTransform:!1!==a,hasPerspective:r("perspective")in o,hasTouch:"ontouchstart"in e,hasPointer:!(!e.PointerEvent&&!e.MSPointerEvent),hasTransition:r("transition")in o}),n.isBadAndroid=function(){var t=e.navigator.appVersion;if(/Android/.test(t)&&!/Chrome\/\d/.test(t)){var i=t.match(/Safari\/(\d+.\d)/);return!(i&&"object"==typeof i&&i.length>=2)||parseFloat(i[1])<535.19}return!1}(),n.extend(n.style={},{transform:a,transitionTimingFunction:r("transitionTimingFunction"),transitionDuration:r("transitionDuration"),transitionDelay:r("transitionDelay"),transformOrigin:r("transformOrigin")}),n.hasClass=function(e,t){return new RegExp("(^|\\s)"+t+"(\\s|$)").test(e.className)},n.addClass=function(e,t){if(!n.hasClass(e,t)){var i=e.className.split(" ");i.push(t),e.className=i.join(" ")}},n.removeClass=function(e,t){if(n.hasClass(e,t)){var i=new RegExp("(^|\\s)"+t+"(\\s|$)","g");e.className=e.className.replace(i," ")}},n.offset=function(e){for(var t=-e.offsetLeft,i=-e.offsetTop;e=e.offsetParent;)t-=e.offsetLeft,i-=e.offsetTop;return{left:t,top:i}},n.preventDefaultException=function(e,t){for(var i in t)if(t[i].test(e[i]))return!0;return!1},n.extend(n.eventType={},{touchstart:1,touchmove:1,touchend:1,mousedown:2,mousemove:2,mouseup:2,pointerdown:3,pointermove:3,pointerup:3,MSPointerDown:3,MSPointerMove:3,MSPointerUp:3}),n.extend(n.ease={},{quadratic:{style:"cubic-bezier(0.25, 0.46, 0.45, 0.94)",fn:function(e){return e*(2-e)}},circular:{style:"cubic-bezier(0.1, 0.57, 0.1, 1)",fn:function(e){return i.sqrt(1- --e*e)}},back:{style:"cubic-bezier(0.175, 0.885, 0.32, 1.275)",fn:function(e){return(e-=1)*e*(5*e+4)+1}},bounce:{style:"",fn:function(e){return(e/=1)<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375}},elastic:{style:"",fn:function(e){return 0===e?0:1==e?1:.4*i.pow(2,-10*e)*i.sin((e-.055)*(2*i.PI)/.22)+1}}}),n.tap=function(e,i){var n=t.createEvent("Event");n.initEvent(i,!0,!0),n.pageX=e.pageX,n.pageY=e.pageY,e.target.dispatchEvent(n)},n.click=function(i){var n,o=i.target;/(SELECT|INPUT|TEXTAREA)/i.test(o.tagName)||((n=t.createEvent(e.MouseEvent?"MouseEvents":"Event")).initEvent("click",!0,!0),n.view=i.view||e,n.detail=1,n.screenX=o.screenX||0,n.screenY=o.screenY||0,n.clientX=o.clientX||0,n.clientY=o.clientY||0,n.ctrlKey=!!i.ctrlKey,n.altKey=!!i.altKey,n.shiftKey=!!i.shiftKey,n.metaKey=!!i.metaKey,n.button=0,n.relatedTarget=null,n._constructed=!0,o.dispatchEvent(n))},n}();function s(i,n){for(var s in this.wrapper="string"==typeof i?t.querySelector(i):i,this.scroller=this.wrapper.children[0],this.scrollerStyle=this.scroller.style,this.options={resizeScrollbars:!0,mouseWheelSpeed:20,snapThreshold:.334,disablePointer:!o.hasPointer,disableTouch:o.hasPointer||!o.hasTouch,disableMouse:o.hasPointer||o.hasTouch,startX:0,startY:0,scrollY:!0,directionLockThreshold:5,momentum:!0,bounce:!0,bounceTime:600,bounceEasing:"",preventDefault:!0,preventDefaultException:{tagName:/^(INPUT|TEXTAREA|BUTTON|SELECT|LABEL)$/},HWCompositing:!0,useTransition:!0,useTransform:!0,bindToWrapper:void 0===e.onmousedown},n)this.options[s]=n[s];this.translateZ=this.options.HWCompositing&&o.hasPerspective?" translateZ(0)":"",this.options.useTransition=o.hasTransition&&this.options.useTransition,this.options.useTransform=o.hasTransform&&this.options.useTransform,this.options.eventPassthrough=!0===this.options.eventPassthrough?"vertical":this.options.eventPassthrough,this.options.preventDefault=!this.options.eventPassthrough&&this.options.preventDefault,this.options.scrollY="vertical"!=this.options.eventPassthrough&&this.options.scrollY,this.options.scrollX="horizontal"!=this.options.eventPassthrough&&this.options.scrollX,this.options.freeScroll=this.options.freeScroll&&!this.options.eventPassthrough,this.options.directionLockThreshold=this.options.eventPassthrough?0:this.options.directionLockThreshold,this.options.bounceEasing="string"==typeof this.options.bounceEasing?o.ease[this.options.bounceEasing]||o.ease.circular:this.options.bounceEasing,this.options.resizePolling=void 0===this.options.resizePolling?60:this.options.resizePolling,!0===this.options.tap&&(this.options.tap="tap"),this.options.useTransition||this.options.useTransform||/relative|absolute/i.test(this.scrollerStyle.position)||(this.scrollerStyle.position="relative"),"scale"==this.options.shrinkScrollbars&&(this.options.useTransition=!1),this.options.invertWheelDirection=this.options.invertWheelDirection?-1:1,this.x=0,this.y=0,this.directionX=0,this.directionY=0,this._events={},this._init(),this.refresh(),this.scrollTo(this.options.startX,this.options.startY),this.enable()}function r(e,i,n){var o=t.createElement("div"),s=t.createElement("div");return!0===n&&(o.style.cssText="position:absolute;z-index:9999",s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px"),s.className="iScrollIndicator","h"==e?(!0===n&&(o.style.cssText+=";height:7px;left:2px;right:2px;bottom:0",s.style.height="100%"),o.className="iScrollHorizontalScrollbar"):(!0===n&&(o.style.cssText+=";width:7px;bottom:2px;top:2px;right:1px",s.style.width="100%"),o.className="iScrollVerticalScrollbar"),o.style.cssText+=";overflow:hidden",i||(o.style.pointerEvents="none"),o.appendChild(s),o}function a(i,s){for(var r in this.wrapper="string"==typeof s.el?t.querySelector(s.el):s.el,this.wrapperStyle=this.wrapper.style,this.indicator=this.wrapper.children[0],this.indicatorStyle=this.indicator.style,this.scroller=i,this.options={listenX:!0,listenY:!0,interactive:!1,resize:!0,defaultScrollbars:!1,shrink:!1,fade:!1,speedRatioX:0,speedRatioY:0},s)this.options[r]=s[r];if(this.sizeRatioX=1,this.sizeRatioY=1,this.maxPosX=0,this.maxPosY=0,this.options.interactive&&(this.options.disableTouch||(o.addEvent(this.indicator,"touchstart",this),o.addEvent(e,"touchend",this)),this.options.disablePointer||(o.addEvent(this.indicator,o.prefixPointerEvent("pointerdown"),this),o.addEvent(e,o.prefixPointerEvent("pointerup"),this)),this.options.disableMouse||(o.addEvent(this.indicator,"mousedown",this),o.addEvent(e,"mouseup",this))),this.options.fade){this.wrapperStyle[o.style.transform]=this.scroller.translateZ;var a=o.style.transitionDuration;if(!a)return;this.wrapperStyle[a]=o.isBadAndroid?"0.0001ms":"0ms";var l=this;o.isBadAndroid&&n((function(){"0.0001ms"===l.wrapperStyle[a]&&(l.wrapperStyle[a]="0s")})),this.wrapperStyle.opacity="0"}}s.prototype={version:"5.2.0",_init:function(){this._initEvents(),(this.options.scrollbars||this.options.indicators)&&this._initIndicators(),this.options.mouseWheel&&this._initWheel(),this.options.snap&&this._initSnap(),this.options.keyBindings&&this._initKeys()},destroy:function(){this._initEvents(!0),clearTimeout(this.resizeTimeout),this.resizeTimeout=null,this._execEvent("destroy")},_transitionEnd:function(e){e.target==this.scroller&&this.isInTransition&&(this._transitionTime(),this.resetPosition(this.options.bounceTime)||(this.isInTransition=!1,this._execEvent("scrollEnd")))},_start:function(e){if(1!=o.eventType[e.type]&&0!==(e.which?e.button:e.button<2?0:4==e.button?1:2))return;if(this.enabled&&(!this.initiated||o.eventType[e.type]===this.initiated)){!this.options.preventDefault||o.isBadAndroid||o.preventDefaultException(e.target,this.options.preventDefaultException)||e.preventDefault();var t,n=e.touches?e.touches[0]:e;this.initiated=o.eventType[e.type],this.moved=!1,this.distX=0,this.distY=0,this.directionX=0,this.directionY=0,this.directionLocked=0,this.startTime=o.getTime(),this.options.useTransition&&this.isInTransition?(this._transitionTime(),this.isInTransition=!1,t=this.getComputedPosition(),this._translate(i.round(t.x),i.round(t.y)),this._execEvent("scrollEnd")):!this.options.useTransition&&this.isAnimating&&(this.isAnimating=!1,this._execEvent("scrollEnd")),this.startX=this.x,this.startY=this.y,this.absStartX=this.x,this.absStartY=this.y,this.pointX=n.pageX,this.pointY=n.pageY,this._execEvent("beforeScrollStart")}},_move:function(e){if(this.enabled&&o.eventType[e.type]===this.initiated){this.options.preventDefault&&e.preventDefault();var t,n,s,r,a=e.touches?e.touches[0]:e,l=a.pageX-this.pointX,c=a.pageY-this.pointY,d=o.getTime();if(this.pointX=a.pageX,this.pointY=a.pageY,this.distX+=l,this.distY+=c,s=i.abs(this.distX),r=i.abs(this.distY),!(d-this.endTime>300&&s<10&&r<10)){if(this.directionLocked||this.options.freeScroll||(s>r+this.options.directionLockThreshold?this.directionLocked="h":r>=s+this.options.directionLockThreshold?this.directionLocked="v":this.directionLocked="n"),"h"==this.directionLocked){if("vertical"==this.options.eventPassthrough)e.preventDefault();else if("horizontal"==this.options.eventPassthrough)return void(this.initiated=!1);c=0}else if("v"==this.directionLocked){if("horizontal"==this.options.eventPassthrough)e.preventDefault();else if("vertical"==this.options.eventPassthrough)return void(this.initiated=!1);l=0}l=this.hasHorizontalScroll?l:0,c=this.hasVerticalScroll?c:0,t=this.x+l,n=this.y+c,(t>0||t<this.maxScrollX)&&(t=this.options.bounce?this.x+l/3:t>0?0:this.maxScrollX),(n>0||n<this.maxScrollY)&&(n=this.options.bounce?this.y+c/3:n>0?0:this.maxScrollY),this.directionX=l>0?-1:l<0?1:0,this.directionY=c>0?-1:c<0?1:0,this.moved||this._execEvent("scrollStart"),this.moved=!0,this._translate(t,n),d-this.startTime>300&&(this.startTime=d,this.startX=this.x,this.startY=this.y)}}},_end:function(e){if(this.enabled&&o.eventType[e.type]===this.initiated){this.options.preventDefault&&!o.preventDefaultException(e.target,this.options.preventDefaultException)&&e.preventDefault();e.changedTouches&&e.changedTouches[0];var t,n,s=o.getTime()-this.startTime,r=i.round(this.x),a=i.round(this.y),l=i.abs(r-this.startX),c=i.abs(a-this.startY),d=0,u="";if(this.isInTransition=0,this.initiated=0,this.endTime=o.getTime(),!this.resetPosition(this.options.bounceTime)){if(this.scrollTo(r,a),!this.moved)return this.options.tap&&o.tap(e,this.options.tap),this.options.click&&o.click(e),void this._execEvent("scrollCancel");if(this._events.flick&&s<200&&l<100&&c<100)this._execEvent("flick");else{if(this.options.momentum&&s<300&&(t=this.hasHorizontalScroll?o.momentum(this.x,this.startX,s,this.maxScrollX,this.options.bounce?this.wrapperWidth:0,this.options.deceleration):{destination:r,duration:0},n=this.hasVerticalScroll?o.momentum(this.y,this.startY,s,this.maxScrollY,this.options.bounce?this.wrapperHeight:0,this.options.deceleration):{destination:a,duration:0},r=t.destination,a=n.destination,d=i.max(t.duration,n.duration),this.isInTransition=1),this.options.snap){var p=this._nearestSnap(r,a);this.currentPage=p,d=this.options.snapSpeed||i.max(i.max(i.min(i.abs(r-p.x),1e3),i.min(i.abs(a-p.y),1e3)),300),r=p.x,a=p.y,this.directionX=0,this.directionY=0,u=this.options.bounceEasing}if(r!=this.x||a!=this.y)return(r>0||r<this.maxScrollX||a>0||a<this.maxScrollY)&&(u=o.ease.quadratic),void this.scrollTo(r,a,d,u);this._execEvent("scrollEnd")}}}},_resize:function(){var e=this;clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout((function(){e.refresh()}),this.options.resizePolling)},resetPosition:function(e){var t=this.x,i=this.y;return e=e||0,!this.hasHorizontalScroll||this.x>0?t=0:this.x<this.maxScrollX&&(t=this.maxScrollX),!this.hasVerticalScroll||this.y>0?i=0:this.y<this.maxScrollY&&(i=this.maxScrollY),(t!=this.x||i!=this.y)&&(this.scrollTo(t,i,e,this.options.bounceEasing),!0)},disable:function(){this.enabled=!1},enable:function(){this.enabled=!0},refresh:function(){this.wrapper.offsetHeight;this.wrapperWidth=this.wrapper.clientWidth,this.wrapperHeight=this.wrapper.clientHeight,this.scrollerWidth=this.scroller.offsetWidth,this.scrollerHeight=this.scroller.offsetHeight,this.maxScrollX=this.wrapperWidth-this.scrollerWidth,this.maxScrollY=this.wrapperHeight-this.scrollerHeight,this.hasHorizontalScroll=this.options.scrollX&&this.maxScrollX<0,this.hasVerticalScroll=this.options.scrollY&&this.maxScrollY<0,this.hasHorizontalScroll||(this.maxScrollX=0,this.scrollerWidth=this.wrapperWidth),this.hasVerticalScroll||(this.maxScrollY=0,this.scrollerHeight=this.wrapperHeight),this.endTime=0,this.directionX=0,this.directionY=0,this.wrapperOffset=o.offset(this.wrapper),this._execEvent("refresh"),this.resetPosition()},on:function(e,t){this._events[e]||(this._events[e]=[]),this._events[e].push(t)},off:function(e,t){if(this._events[e]){var i=this._events[e].indexOf(t);i>-1&&this._events[e].splice(i,1)}},_execEvent:function(e){if(this._events[e]){var t=0,i=this._events[e].length;if(i)for(;t<i;t++)this._events[e][t].apply(this,[].slice.call(arguments,1))}},scrollBy:function(e,t,i,n){e=this.x+e,t=this.y+t,i=i||0,this.scrollTo(e,t,i,n)},scrollTo:function(e,t,i,n){n=n||o.ease.circular,this.isInTransition=this.options.useTransition&&i>0;var s=this.options.useTransition&&n.style;!i||s?(s&&(this._transitionTimingFunction(n.style),this._transitionTime(i)),this._translate(e,t)):this._animate(e,t,i,n.fn)},scrollToElement:function(e,t,n,s,r){if(e=e.nodeType?e:this.scroller.querySelector(e)){var a=o.offset(e);a.left-=this.wrapperOffset.left,a.top-=this.wrapperOffset.top,!0===n&&(n=i.round(e.offsetWidth/2-this.wrapper.offsetWidth/2)),!0===s&&(s=i.round(e.offsetHeight/2-this.wrapper.offsetHeight/2)),a.left-=n||0,a.top-=s||0,a.left=a.left>0?0:a.left<this.maxScrollX?this.maxScrollX:a.left,a.top=a.top>0?0:a.top<this.maxScrollY?this.maxScrollY:a.top,t=null==t||"auto"===t?i.max(i.abs(this.x-a.left),i.abs(this.y-a.top)):t,this.scrollTo(a.left,a.top,t,r)}},_transitionTime:function(e){if(this.options.useTransition){e=e||0;var t=o.style.transitionDuration;if(t){if(this.scrollerStyle[t]=e+"ms",!e&&o.isBadAndroid){this.scrollerStyle[t]="0.0001ms";var i=this;n((function(){"0.0001ms"===i.scrollerStyle[t]&&(i.scrollerStyle[t]="0s")}))}if(this.indicators)for(var s=this.indicators.length;s--;)this.indicators[s].transitionTime(e)}}},_transitionTimingFunction:function(e){if(this.scrollerStyle[o.style.transitionTimingFunction]=e,this.indicators)for(var t=this.indicators.length;t--;)this.indicators[t].transitionTimingFunction(e)},_translate:function(e,t){if(this.options.useTransform?this.scrollerStyle[o.style.transform]="translate("+e+"px,"+t+"px)"+this.translateZ:(e=i.round(e),t=i.round(t),this.scrollerStyle.left=e+"px",this.scrollerStyle.top=t+"px"),this.x=e,this.y=t,this.indicators)for(var n=this.indicators.length;n--;)this.indicators[n].updatePosition()},_initEvents:function(t){var i=t?o.removeEvent:o.addEvent,n=this.options.bindToWrapper?this.wrapper:e;i(e,"orientationchange",this),i(e,"resize",this),this.options.click&&i(this.wrapper,"click",this,!0),this.options.disableMouse||(i(this.wrapper,"mousedown",this),i(n,"mousemove",this),i(n,"mousecancel",this),i(n,"mouseup",this)),o.hasPointer&&!this.options.disablePointer&&(i(this.wrapper,o.prefixPointerEvent("pointerdown"),this),i(n,o.prefixPointerEvent("pointermove"),this),i(n,o.prefixPointerEvent("pointercancel"),this),i(n,o.prefixPointerEvent("pointerup"),this)),o.hasTouch&&!this.options.disableTouch&&(i(this.wrapper,"touchstart",this),i(n,"touchmove",this),i(n,"touchcancel",this),i(n,"touchend",this)),i(this.scroller,"transitionend",this),i(this.scroller,"webkitTransitionEnd",this),i(this.scroller,"oTransitionEnd",this),i(this.scroller,"MSTransitionEnd",this)},getComputedPosition:function(){var t,i,n=e.getComputedStyle(this.scroller,null);return this.options.useTransform?(t=+((n=n[o.style.transform].split(")")[0].split(", "))[12]||n[4]),i=+(n[13]||n[5])):(t=+n.left.replace(/[^-\d.]/g,""),i=+n.top.replace(/[^-\d.]/g,"")),{x:t,y:i}},_initIndicators:function(){var e,t=this.options.interactiveScrollbars,i="string"!=typeof this.options.scrollbars,n=[],o=this;this.indicators=[],this.options.scrollbars&&(this.options.scrollY&&(e={el:r("v",t,this.options.scrollbars),interactive:t,defaultScrollbars:!0,customStyle:i,resize:this.options.resizeScrollbars,shrink:this.options.shrinkScrollbars,fade:this.options.fadeScrollbars,listenX:!1},this.wrapper.appendChild(e.el),n.push(e)),this.options.scrollX&&(e={el:r("h",t,this.options.scrollbars),interactive:t,defaultScrollbars:!0,customStyle:i,resize:this.options.resizeScrollbars,shrink:this.options.shrinkScrollbars,fade:this.options.fadeScrollbars,listenY:!1},this.wrapper.appendChild(e.el),n.push(e))),this.options.indicators&&(n=n.concat(this.options.indicators));for(var s=n.length;s--;)this.indicators.push(new a(this,n[s]));function l(e){if(o.indicators)for(var t=o.indicators.length;t--;)e.call(o.indicators[t])}this.options.fadeScrollbars&&(this.on("scrollEnd",(function(){l((function(){this.fade()}))})),this.on("scrollCancel",(function(){l((function(){this.fade()}))})),this.on("scrollStart",(function(){l((function(){this.fade(1)}))})),this.on("beforeScrollStart",(function(){l((function(){this.fade(1,!0)}))}))),this.on("refresh",(function(){l((function(){this.refresh()}))})),this.on("destroy",(function(){l((function(){this.destroy()})),delete this.indicators}))},_initWheel:function(){o.addEvent(this.wrapper,"wheel",this),o.addEvent(this.wrapper,"mousewheel",this),o.addEvent(this.wrapper,"DOMMouseScroll",this),this.on("destroy",(function(){clearTimeout(this.wheelTimeout),this.wheelTimeout=null,o.removeEvent(this.wrapper,"wheel",this),o.removeEvent(this.wrapper,"mousewheel",this),o.removeEvent(this.wrapper,"DOMMouseScroll",this)}))},_wheel:function(e){if(this.enabled){var t,n,o,s,r=this;if(void 0===this.wheelTimeout&&r._execEvent("scrollStart"),clearTimeout(this.wheelTimeout),this.wheelTimeout=setTimeout((function(){r.options.snap||r._execEvent("scrollEnd"),r.wheelTimeout=void 0}),400),"deltaX"in e)1===e.deltaMode?(t=-e.deltaX*this.options.mouseWheelSpeed,n=-e.deltaY*this.options.mouseWheelSpeed):(t=-e.deltaX,n=-e.deltaY);else if("wheelDeltaX"in e)t=e.wheelDeltaX/120*this.options.mouseWheelSpeed,n=e.wheelDeltaY/120*this.options.mouseWheelSpeed;else if("wheelDelta"in e)t=n=e.wheelDelta/120*this.options.mouseWheelSpeed;else{if(!("detail"in e))return;t=n=-e.detail/3*this.options.mouseWheelSpeed}if(t*=this.options.invertWheelDirection,n*=this.options.invertWheelDirection,this.hasVerticalScroll||(t=n,n=0),this.options.snap)return o=this.currentPage.pageX,s=this.currentPage.pageY,t>0?o--:t<0&&o++,n>0?s--:n<0&&s++,void this.goToPage(o,s);o=this.x+i.round(this.hasHorizontalScroll?t:0),s=this.y+i.round(this.hasVerticalScroll?n:0),this.directionX=t>0?-1:t<0?1:0,this.directionY=n>0?-1:n<0?1:0,o>0?o=0:o<this.maxScrollX&&(o=this.maxScrollX),s>0?s=0:s<this.maxScrollY&&(s=this.maxScrollY),this.scrollTo(o,s,0)}},_initSnap:function(){this.currentPage={},"string"==typeof this.options.snap&&(this.options.snap=this.scroller.querySelectorAll(this.options.snap)),this.on("refresh",(function(){var e,t,n,o,s,r,a=0,l=0,c=0,d=this.options.snapStepX||this.wrapperWidth,u=this.options.snapStepY||this.wrapperHeight;if(this.pages=[],this.wrapperWidth&&this.wrapperHeight&&this.scrollerWidth&&this.scrollerHeight){if(!0===this.options.snap)for(n=i.round(d/2),o=i.round(u/2);c>-this.scrollerWidth;){for(this.pages[a]=[],e=0,s=0;s>-this.scrollerHeight;)this.pages[a][e]={x:i.max(c,this.maxScrollX),y:i.max(s,this.maxScrollY),width:d,height:u,cx:c-n,cy:s-o},s-=u,e++;c-=d,a++}else for(e=(r=this.options.snap).length,t=-1;a<e;a++)(0===a||r[a].offsetLeft<=r[a-1].offsetLeft)&&(l=0,t++),this.pages[l]||(this.pages[l]=[]),c=i.max(-r[a].offsetLeft,this.maxScrollX),s=i.max(-r[a].offsetTop,this.maxScrollY),n=c-i.round(r[a].offsetWidth/2),o=s-i.round(r[a].offsetHeight/2),this.pages[l][t]={x:c,y:s,width:r[a].offsetWidth,height:r[a].offsetHeight,cx:n,cy:o},c>this.maxScrollX&&l++;this.goToPage(this.currentPage.pageX||0,this.currentPage.pageY||0,0),this.options.snapThreshold%1==0?(this.snapThresholdX=this.options.snapThreshold,this.snapThresholdY=this.options.snapThreshold):(this.snapThresholdX=i.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width*this.options.snapThreshold),this.snapThresholdY=i.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height*this.options.snapThreshold))}})),this.on("flick",(function(){var e=this.options.snapSpeed||i.max(i.max(i.min(i.abs(this.x-this.startX),1e3),i.min(i.abs(this.y-this.startY),1e3)),300);this.goToPage(this.currentPage.pageX+this.directionX,this.currentPage.pageY+this.directionY,e)}))},_nearestSnap:function(e,t){if(!this.pages.length)return{x:0,y:0,pageX:0,pageY:0};var n=0,o=this.pages.length,s=0;if(i.abs(e-this.absStartX)<this.snapThresholdX&&i.abs(t-this.absStartY)<this.snapThresholdY)return this.currentPage;for(e>0?e=0:e<this.maxScrollX&&(e=this.maxScrollX),t>0?t=0:t<this.maxScrollY&&(t=this.maxScrollY);n<o;n++)if(e>=this.pages[n][0].cx){e=this.pages[n][0].x;break}for(o=this.pages[n].length;s<o;s++)if(t>=this.pages[0][s].cy){t=this.pages[0][s].y;break}return n==this.currentPage.pageX&&((n+=this.directionX)<0?n=0:n>=this.pages.length&&(n=this.pages.length-1),e=this.pages[n][0].x),s==this.currentPage.pageY&&((s+=this.directionY)<0?s=0:s>=this.pages[0].length&&(s=this.pages[0].length-1),t=this.pages[0][s].y),{x:e,y:t,pageX:n,pageY:s}},goToPage:function(e,t,n,o){o=o||this.options.bounceEasing,e>=this.pages.length?e=this.pages.length-1:e<0&&(e=0),t>=this.pages[e].length?t=this.pages[e].length-1:t<0&&(t=0);var s=this.pages[e][t].x,r=this.pages[e][t].y;n=void 0===n?this.options.snapSpeed||i.max(i.max(i.min(i.abs(s-this.x),1e3),i.min(i.abs(r-this.y),1e3)),300):n,this.currentPage={x:s,y:r,pageX:e,pageY:t},this.scrollTo(s,r,n,o)},next:function(e,t){var i=this.currentPage.pageX,n=this.currentPage.pageY;++i>=this.pages.length&&this.hasVerticalScroll&&(i=0,n++),this.goToPage(i,n,e,t)},prev:function(e,t){var i=this.currentPage.pageX,n=this.currentPage.pageY;--i<0&&this.hasVerticalScroll&&(i=0,n--),this.goToPage(i,n,e,t)},_initKeys:function(t){var i,n={pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40};if("object"==typeof this.options.keyBindings)for(i in this.options.keyBindings)"string"==typeof this.options.keyBindings[i]&&(this.options.keyBindings[i]=this.options.keyBindings[i].toUpperCase().charCodeAt(0));else this.options.keyBindings={};for(i in n)this.options.keyBindings[i]=this.options.keyBindings[i]||n[i];o.addEvent(e,"keydown",this),this.on("destroy",(function(){o.removeEvent(e,"keydown",this)}))},_key:function(e){if(this.enabled){var t,n=this.options.snap,s=n?this.currentPage.pageX:this.x,r=n?this.currentPage.pageY:this.y,a=o.getTime(),l=this.keyTime||0;switch(this.options.useTransition&&this.isInTransition&&(t=this.getComputedPosition(),this._translate(i.round(t.x),i.round(t.y)),this.isInTransition=!1),this.keyAcceleration=a-l<200?i.min(this.keyAcceleration+.25,50):0,e.keyCode){case this.options.keyBindings.pageUp:this.hasHorizontalScroll&&!this.hasVerticalScroll?s+=n?1:this.wrapperWidth:r+=n?1:this.wrapperHeight;break;case this.options.keyBindings.pageDown:this.hasHorizontalScroll&&!this.hasVerticalScroll?s-=n?1:this.wrapperWidth:r-=n?1:this.wrapperHeight;break;case this.options.keyBindings.end:s=n?this.pages.length-1:this.maxScrollX,r=n?this.pages[0].length-1:this.maxScrollY;break;case this.options.keyBindings.home:s=0,r=0;break;case this.options.keyBindings.left:s+=n?-1:5+this.keyAcceleration>>0;break;case this.options.keyBindings.up:r+=n?1:5+this.keyAcceleration>>0;break;case this.options.keyBindings.right:s-=n?-1:5+this.keyAcceleration>>0;break;case this.options.keyBindings.down:r-=n?1:5+this.keyAcceleration>>0;break;default:return}n?this.goToPage(s,r):(s>0?(s=0,this.keyAcceleration=0):s<this.maxScrollX&&(s=this.maxScrollX,this.keyAcceleration=0),r>0?(r=0,this.keyAcceleration=0):r<this.maxScrollY&&(r=this.maxScrollY,this.keyAcceleration=0),this.scrollTo(s,r,0),this.keyTime=a)}},_animate:function(e,t,i,s){var r=this,a=this.x,l=this.y,c=o.getTime(),d=c+i;this.isAnimating=!0,function u(){var p,h,f,v=o.getTime();if(v>=d)return r.isAnimating=!1,r._translate(e,t),void(r.resetPosition(r.options.bounceTime)||r._execEvent("scrollEnd"));f=s(v=(v-c)/i),p=(e-a)*f+a,h=(t-l)*f+l,r._translate(p,h),r.isAnimating&&n(u)}()},handleEvent:function(e){switch(e.type){case"touchstart":case"pointerdown":case"MSPointerDown":case"mousedown":this._start(e);break;case"touchmove":case"pointermove":case"MSPointerMove":case"mousemove":this._move(e);break;case"touchend":case"pointerup":case"MSPointerUp":case"mouseup":case"touchcancel":case"pointercancel":case"MSPointerCancel":case"mousecancel":this._end(e);break;case"orientationchange":case"resize":this._resize();break;case"transitionend":case"webkitTransitionEnd":case"oTransitionEnd":case"MSTransitionEnd":this._transitionEnd(e);break;case"wheel":case"DOMMouseScroll":case"mousewheel":this._wheel(e);break;case"keydown":this._key(e);break;case"click":this.enabled&&!e._constructed&&(e.preventDefault(),e.stopPropagation())}}},a.prototype={handleEvent:function(e){switch(e.type){case"touchstart":case"pointerdown":case"MSPointerDown":case"mousedown":this._start(e);break;case"touchmove":case"pointermove":case"MSPointerMove":case"mousemove":this._move(e);break;case"touchend":case"pointerup":case"MSPointerUp":case"mouseup":case"touchcancel":case"pointercancel":case"MSPointerCancel":case"mousecancel":this._end(e)}},destroy:function(){this.options.fadeScrollbars&&(clearTimeout(this.fadeTimeout),this.fadeTimeout=null),this.options.interactive&&(o.removeEvent(this.indicator,"touchstart",this),o.removeEvent(this.indicator,o.prefixPointerEvent("pointerdown"),this),o.removeEvent(this.indicator,"mousedown",this),o.removeEvent(e,"touchmove",this),o.removeEvent(e,o.prefixPointerEvent("pointermove"),this),o.removeEvent(e,"mousemove",this),o.removeEvent(e,"touchend",this),o.removeEvent(e,o.prefixPointerEvent("pointerup"),this),o.removeEvent(e,"mouseup",this)),this.options.defaultScrollbars&&this.wrapper.parentNode.removeChild(this.wrapper)},_start:function(t){var i=t.touches?t.touches[0]:t;t.preventDefault(),t.stopPropagation(),this.transitionTime(),this.initiated=!0,this.moved=!1,this.lastPointX=i.pageX,this.lastPointY=i.pageY,this.startTime=o.getTime(),this.options.disableTouch||o.addEvent(e,"touchmove",this),this.options.disablePointer||o.addEvent(e,o.prefixPointerEvent("pointermove"),this),this.options.disableMouse||o.addEvent(e,"mousemove",this),this.scroller._execEvent("beforeScrollStart")},_move:function(e){var t,i,n,s,r=e.touches?e.touches[0]:e;o.getTime();this.moved||this.scroller._execEvent("scrollStart"),this.moved=!0,t=r.pageX-this.lastPointX,this.lastPointX=r.pageX,i=r.pageY-this.lastPointY,this.lastPointY=r.pageY,n=this.x+t,s=this.y+i,this._pos(n,s),e.preventDefault(),e.stopPropagation()},_end:function(t){if(this.initiated){if(this.initiated=!1,t.preventDefault(),t.stopPropagation(),o.removeEvent(e,"touchmove",this),o.removeEvent(e,o.prefixPointerEvent("pointermove"),this),o.removeEvent(e,"mousemove",this),this.scroller.options.snap){var n=this.scroller._nearestSnap(this.scroller.x,this.scroller.y),s=this.options.snapSpeed||i.max(i.max(i.min(i.abs(this.scroller.x-n.x),1e3),i.min(i.abs(this.scroller.y-n.y),1e3)),300);this.scroller.x==n.x&&this.scroller.y==n.y||(this.scroller.directionX=0,this.scroller.directionY=0,this.scroller.currentPage=n,this.scroller.scrollTo(n.x,n.y,s,this.scroller.options.bounceEasing))}this.moved&&this.scroller._execEvent("scrollEnd")}},transitionTime:function(e){e=e||0;var t=o.style.transitionDuration;if(t&&(this.indicatorStyle[t]=e+"ms",!e&&o.isBadAndroid)){this.indicatorStyle[t]="0.0001ms";var i=this;n((function(){"0.0001ms"===i.indicatorStyle[t]&&(i.indicatorStyle[t]="0s")}))}},transitionTimingFunction:function(e){this.indicatorStyle[o.style.transitionTimingFunction]=e},refresh:function(){this.transitionTime(),this.options.listenX&&!this.options.listenY?this.indicatorStyle.display=this.scroller.hasHorizontalScroll?"block":"none":this.options.listenY&&!this.options.listenX?this.indicatorStyle.display=this.scroller.hasVerticalScroll?"block":"none":this.indicatorStyle.display=this.scroller.hasHorizontalScroll||this.scroller.hasVerticalScroll?"block":"none",this.scroller.hasHorizontalScroll&&this.scroller.hasVerticalScroll?(o.addClass(this.wrapper,"iScrollBothScrollbars"),o.removeClass(this.wrapper,"iScrollLoneScrollbar"),this.options.defaultScrollbars&&this.options.customStyle&&(this.options.listenX?this.wrapper.style.right="8px":this.wrapper.style.bottom="8px")):(o.removeClass(this.wrapper,"iScrollBothScrollbars"),o.addClass(this.wrapper,"iScrollLoneScrollbar"),this.options.defaultScrollbars&&this.options.customStyle&&(this.options.listenX?this.wrapper.style.right="2px":this.wrapper.style.bottom="2px"));this.wrapper.offsetHeight;this.options.listenX&&(this.wrapperWidth=this.wrapper.clientWidth,this.options.resize?(this.indicatorWidth=i.max(i.round(this.wrapperWidth*this.wrapperWidth/(this.scroller.scrollerWidth||this.wrapperWidth||1)),8),this.indicatorStyle.width=this.indicatorWidth+"px"):this.indicatorWidth=this.indicator.clientWidth,this.maxPosX=this.wrapperWidth-this.indicatorWidth,"clip"==this.options.shrink?(this.minBoundaryX=8-this.indicatorWidth,this.maxBoundaryX=this.wrapperWidth-8):(this.minBoundaryX=0,this.maxBoundaryX=this.maxPosX),this.sizeRatioX=this.options.speedRatioX||this.scroller.maxScrollX&&this.maxPosX/this.scroller.maxScrollX),this.options.listenY&&(this.wrapperHeight=this.wrapper.clientHeight,this.options.resize?(this.indicatorHeight=i.max(i.round(this.wrapperHeight*this.wrapperHeight/(this.scroller.scrollerHeight||this.wrapperHeight||1)),8),this.indicatorStyle.height=this.indicatorHeight+"px"):this.indicatorHeight=this.indicator.clientHeight,this.maxPosY=this.wrapperHeight-this.indicatorHeight,"clip"==this.options.shrink?(this.minBoundaryY=8-this.indicatorHeight,this.maxBoundaryY=this.wrapperHeight-8):(this.minBoundaryY=0,this.maxBoundaryY=this.maxPosY),this.maxPosY=this.wrapperHeight-this.indicatorHeight,this.sizeRatioY=this.options.speedRatioY||this.scroller.maxScrollY&&this.maxPosY/this.scroller.maxScrollY),this.updatePosition()},updatePosition:function(){var e=this.options.listenX&&i.round(this.sizeRatioX*this.scroller.x)||0,t=this.options.listenY&&i.round(this.sizeRatioY*this.scroller.y)||0;this.options.ignoreBoundaries||(e<this.minBoundaryX?("scale"==this.options.shrink&&(this.width=i.max(this.indicatorWidth+e,8),this.indicatorStyle.width=this.width+"px"),e=this.minBoundaryX):e>this.maxBoundaryX?"scale"==this.options.shrink?(this.width=i.max(this.indicatorWidth-(e-this.maxPosX),8),this.indicatorStyle.width=this.width+"px",e=this.maxPosX+this.indicatorWidth-this.width):e=this.maxBoundaryX:"scale"==this.options.shrink&&this.width!=this.indicatorWidth&&(this.width=this.indicatorWidth,this.indicatorStyle.width=this.width+"px"),t<this.minBoundaryY?("scale"==this.options.shrink&&(this.height=i.max(this.indicatorHeight+3*t,8),this.indicatorStyle.height=this.height+"px"),t=this.minBoundaryY):t>this.maxBoundaryY?"scale"==this.options.shrink?(this.height=i.max(this.indicatorHeight-3*(t-this.maxPosY),8),this.indicatorStyle.height=this.height+"px",t=this.maxPosY+this.indicatorHeight-this.height):t=this.maxBoundaryY:"scale"==this.options.shrink&&this.height!=this.indicatorHeight&&(this.height=this.indicatorHeight,this.indicatorStyle.height=this.height+"px")),this.x=e,this.y=t,this.scroller.options.useTransform?this.indicatorStyle[o.style.transform]="translate("+e+"px,"+t+"px)"+this.scroller.translateZ:(this.indicatorStyle.left=e+"px",this.indicatorStyle.top=t+"px")},_pos:function(e,t){e<0?e=0:e>this.maxPosX&&(e=this.maxPosX),t<0?t=0:t>this.maxPosY&&(t=this.maxPosY),e=this.options.listenX?i.round(e/this.sizeRatioX):this.scroller.x,t=this.options.listenY?i.round(t/this.sizeRatioY):this.scroller.y,this.scroller.scrollTo(e,t)},fade:function(e,t){if(!t||this.visible){clearTimeout(this.fadeTimeout),this.fadeTimeout=null;var i=e?250:500,n=e?0:300;e=e?"1":"0",this.wrapperStyle[o.style.transitionDuration]=i+"ms",this.fadeTimeout=setTimeout(function(e){this.wrapperStyle.opacity=e,this.visible=+e}.bind(this,e),n)}}},s.utils=o,"undefined"!=typeof module&&module.exports?module.exports=s:"function"==typeof define&&define.amd?define((function(){return s})):e.IScroll=s}(window,document,Math),function(e,t,i){i.fn.fp_scrolloverflow=function(){function n(e){var t=e.closest(".fp-section");return t.length?parseInt(t.css("padding-bottom"))+parseInt(t.css("padding-top")):0}function o(){var o=this;function s(){var e;i("body").hasClass("fp-responsive")?(e=o.options.scrollOverflowHandler,a((function(t){t.closest(".fp-section").hasClass("fp-auto-height-responsive")&&e.remove(t)}))):a(r)}function r(t){if(!t.hasClass("fp-noscroll")){t.css("overflow","hidden");var s,r=o.options.scrollOverflowHandler,a=r.wrapContent(),l=t.closest(".fp-section"),c=r.scrollable(t),d=n(l);c.length?s=r.scrollHeight(t):(s=t.get(0).scrollHeight-d,o.options.verticalCentered&&(s=t.find(".fp-tableCell").get(0).scrollHeight-d));var u=i(e).height()-d;s>u?c.length?r.update(t,u):(o.options.verticalCentered?t.find(".fp-tableCell").wrapInner(a):t.wrapInner(a),r.create(t,u,o.iscrollOptions)):r.remove(t),t.css("overflow","")}}function a(e){i(".fp-section").each((function(){var t=i(this).find(".fp-slide");t.length?t.each((function(){e(i(this))})):e(i(this))}))}o.options=null,o.init=function(n,r){return o.options=n,o.iscrollOptions=r,"complete"===t.readyState&&(s(),i.fn.fullpage.shared.afterRenderActions()),i(e).on("load",(function(){s(),i.fn.fullpage.shared.afterRenderActions()})),o},o.createScrollBarForAll=s}IScroll.prototype.wheelOn=function(){this.wrapper.addEventListener("wheel",this),this.wrapper.addEventListener("mousewheel",this),this.wrapper.addEventListener("DOMMouseScroll",this)},IScroll.prototype.wheelOff=function(){this.wrapper.removeEventListener("wheel",this),this.wrapper.removeEventListener("mousewheel",this),this.wrapper.removeEventListener("DOMMouseScroll",this)};var s={refreshId:null,iScrollInstances:[],iscrollOptions:{scrollbars:!0,mouseWheel:!0,hideScrollbars:!1,fadeScrollbars:!1,disableMouse:!0,interactiveScrollbars:!0},init:function(t){var n="ontouchstart"in e||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints;return s.iscrollOptions.click=n,s.iscrollOptions=i.extend(s.iscrollOptions,t.scrollOverflowOptions),(new o).init(t,s.iscrollOptions)},toggleWheel:function(e){i(".fp-section.active").find(".fp-scrollable").each((function(){var t=i(this).data("iscrollInstance");void 0!==t&&t&&(e?t.wheelOn():t.wheelOff())}))},onLeave:function(){s.toggleWheel(!1)},beforeLeave:function(){s.onLeave()},afterLoad:function(){s.toggleWheel(!0)},create:function(e,t,n){var o=e.find(".fp-scrollable");o.height(t),o.each((function(){var t=i(this),o=t.data("iscrollInstance");o&&i.each(s.iScrollInstances,(function(){i(this).destroy()})),o=new IScroll(t.get(0),n),s.iScrollInstances.push(o),e.closest(".fp-section").hasClass("active")||o.wheelOff(),t.data("iscrollInstance",o)}))},isScrolled:function(e,t){var i=t.data("iscrollInstance");return!i||("top"===e?i.y>=0&&!t.scrollTop():"bottom"===e?0-i.y+t.scrollTop()+1+t.innerHeight()>=t[0].scrollHeight:void 0)},scrollable:function(e){return e.find(".fp-slides").length?e.find(".fp-slide.active").find(".fp-scrollable"):e.find(".fp-scrollable")},scrollHeight:function(e){return e.find(".fp-scrollable").children().first().get(0).scrollHeight},remove:function(e){var t=e.find(".fp-scrollable");if(t.length){var i=t.data("iscrollInstance");i&&i.destroy(),t.data("iscrollInstance",null)}e.find(".fp-scrollable").children().first().children().first().unwrap().unwrap()},update:function(e,t){clearTimeout(s.refreshId),s.refreshId=setTimeout((function(){i.each(s.iScrollInstances,(function(){i(this).get(0).refresh(),i.fn.fullpage.silentMoveTo(i(".fp-section.active").index()+1)}))}),150),e.find(".fp-scrollable").css("height",t+"px").parent().css("height",t+n(e)+"px")},wrapContent:function(){return'<div class="fp-scrollable"><div class="fp-scroller"></div></div>'}};return{iscrollHandler:s}}()}(window,document,jQuery),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}((function(e){"use strict";var t,i=window.Slick||{};t=0,(i=function(i,n){var o,s=this;s.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(i),appendDots:e(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,i){return e('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},s.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(s,s.initials),s.activeBreakpoint=null,s.animType=null,s.animProp=null,s.breakpoints=[],s.breakpointSettings=[],s.cssTransitions=!1,s.focussed=!1,s.interrupted=!1,s.hidden="hidden",s.paused=!0,s.positionProp=null,s.respondTo=null,s.rowCount=1,s.shouldClick=!0,s.$slider=e(i),s.$slidesCache=null,s.transformType=null,s.transitionType=null,s.visibilityChange="visibilitychange",s.windowWidth=0,s.windowTimer=null,o=e(i).data("slick")||{},s.options=e.extend({},s.defaults,n,o),s.currentSlide=s.options.initialSlide,s.originalSettings=s.options,void 0!==document.mozHidden?(s.hidden="mozHidden",s.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(s.hidden="webkitHidden",s.visibilityChange="webkitvisibilitychange"),s.autoPlay=e.proxy(s.autoPlay,s),s.autoPlayClear=e.proxy(s.autoPlayClear,s),s.autoPlayIterator=e.proxy(s.autoPlayIterator,s),s.changeSlide=e.proxy(s.changeSlide,s),s.clickHandler=e.proxy(s.clickHandler,s),s.selectHandler=e.proxy(s.selectHandler,s),s.setPosition=e.proxy(s.setPosition,s),s.swipeHandler=e.proxy(s.swipeHandler,s),s.dragHandler=e.proxy(s.dragHandler,s),s.keyHandler=e.proxy(s.keyHandler,s),s.instanceUid=t++,s.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,s.registerBreakpoints(),s.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},i.prototype.addSlide=i.prototype.slickAdd=function(t,i,n){var o=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=o.slideCount)return!1;o.unload(),"number"==typeof i?0===i&&0===o.$slides.length?e(t).appendTo(o.$slideTrack):n?e(t).insertBefore(o.$slides.eq(i)):e(t).insertAfter(o.$slides.eq(i)):!0===n?e(t).prependTo(o.$slideTrack):e(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each((function(t,i){e(i).attr("data-slick-index",t)})),o.$slidesCache=o.$slides,o.reinit()},i.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},i.prototype.animateSlide=function(t,i){var n={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,i):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,i):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),e({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?(n[o.animType]="translate("+e+"px, 0px)",o.$slideTrack.css(n)):(n[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?n[o.animType]="translate3d("+t+"px, 0px, 0px)":n[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(n),i&&setTimeout((function(){o.disableTransition(),i.call()}),o.options.speed))},i.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=e(t).not(this.$slider)),t},i.prototype.asNavFor=function(t){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each((function(){var i=e(this).slick("getSlick");i.unslicked||i.slideHandler(t,!0)}))},i.prototype.applyTransition=function(e){var t=this,i={};!1===t.options.fade?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},i.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},i.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},i.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},i.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},i.prototype.buildDots=function(){var t,i,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),i=e("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)i.append(e("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},i.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each((function(t,i){e(i).attr("data-slick-index",t).data("originalStyling",e(i).attr("style")||"")})),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},i.prototype.buildRows=function(){var e,t,i,n,o,s,r,a=this;if(n=document.createDocumentFragment(),s=a.$slider.children(),a.options.rows>0){for(r=a.options.slidesPerRow*a.options.rows,o=Math.ceil(s.length/r),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var d=e*r+(t*a.options.slidesPerRow+i);s.get(d)&&c.appendChild(s.get(d))}l.appendChild(c)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},i.prototype.checkResponsive=function(t,i){var n,o,s,r=this,a=!1,l=r.$slider.width(),c=window.innerWidth||e(window).width();if("window"===r.respondTo?s=c:"slider"===r.respondTo?s=l:"min"===r.respondTo&&(s=Math.min(c,l)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in o=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?s<r.breakpoints[n]&&(o=r.breakpoints[n]):s>r.breakpoints[n]&&(o=r.breakpoints[n]));null!==o?null!==r.activeBreakpoint?(o!==r.activeBreakpoint||i)&&(r.activeBreakpoint=o,"unslick"===r.breakpointSettings[o]?r.unslick(o):(r.options=e.extend({},r.originalSettings,r.breakpointSettings[o]),!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t)),a=o):(r.activeBreakpoint=o,"unslick"===r.breakpointSettings[o]?r.unslick(o):(r.options=e.extend({},r.originalSettings,r.breakpointSettings[o]),!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t)),a=o):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t),a=o),t||!1===a||r.$slider.trigger("breakpoint",[r,a])}},i.prototype.changeSlide=function(t,i){var n,o,s=this,r=e(t.currentTarget);switch(r.is("a")&&t.preventDefault(),r.is("li")||(r=r.closest("li")),n=s.slideCount%s.options.slidesToScroll!=0?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,t.data.message){case"previous":o=0===n?s.options.slidesToScroll:s.options.slidesToShow-n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-o,!1,i);break;case"next":o=0===n?s.options.slidesToScroll:n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+o,!1,i);break;case"index":var a=0===t.data.index?0:t.data.index||r.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(a),!1,i),r.children().trigger("focus");break;default:return}},i.prototype.checkNavigable=function(e){var t,i;if(i=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var n in t){if(e<t[n]){e=i;break}i=t[n]}return e},i.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},i.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},i.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&((e=t.$slides.children().children()).removeAttr("style"),t.$slider.empty().append(e))},i.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},i.prototype.destroy=function(t){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),e(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){e(this).attr("style",e(this).data("originalStyling"))})),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,t||i.$slider.trigger("destroy",[i])},i.prototype.disableTransition=function(e){var t=this,i={};i[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},i.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout((function(){i.disableTransition(e),t.call()}),i.options.speed))},i.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},i.prototype.filterSlides=i.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},i.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(i){i.stopImmediatePropagation();var n=e(this);setTimeout((function(){t.options.pauseOnFocus&&(t.focussed=n.is(":focus"),t.autoPlay())}),0)}))},i.prototype.getCurrent=i.prototype.slickCurrentSlide=function(){return this.currentSlide},i.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},i.prototype.getLeft=function(e){var t,i,n,o,s=this,r=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),!0===s.options.infinite?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,o=-1,!0===s.options.vertical&&!0===s.options.centerMode&&(2===s.options.slidesToShow?o=-1.5:1===s.options.slidesToShow&&(o=-2)),r=i*s.options.slidesToShow*o),s.slideCount%s.options.slidesToScroll!=0&&e+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(e>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(e-s.slideCount))*s.slideWidth*-1,r=(s.options.slidesToShow-(e-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,r=s.slideCount%s.options.slidesToScroll*i*-1))):e+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(e+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(e+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(s.slideOffset=0,r=0),!0===s.options.centerMode&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:!0===s.options.centerMode&&!0===s.options.infinite?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:!0===s.options.centerMode&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),t=!1===s.options.vertical?e*s.slideWidth*-1+s.slideOffset:e*i*-1+r,!0===s.options.variableWidth&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow),t=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===s.options.centerMode&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow+1),t=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,t+=(s.$list.width()-n.outerWidth())/2)),t},i.prototype.getOption=i.prototype.slickGetOption=function(e){return this.options[e]},i.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,o=[];for(!1===t.options.infinite?e=t.slideCount:(i=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,e=2*t.slideCount);i<e;)o.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},i.prototype.getSlick=function(){return this},i.prototype.getSlideCount=function(){var t,i,n=this;return i=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each((function(o,s){if(s.offsetLeft-i+e(s).outerWidth()/2>-1*n.swipeLeft)return t=s,!1})),Math.abs(e(t).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},i.prototype.goTo=i.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},i.prototype.init=function(t){var i=this;e(i.$slider).hasClass("slick-initialized")||(e(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),t&&i.$slider.trigger("init",[i]),!0===i.options.accessibility&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},i.prototype.initADA=function(){var t=this,i=Math.ceil(t.slideCount/t.options.slidesToShow),n=t.getNavigableIndexes().filter((function(e){return e>=0&&e<t.slideCount}));t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each((function(i){var o=n.indexOf(i);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+i,tabindex:-1}),-1!==o){var s="slick-slide-control"+t.instanceUid+o;e("#"+s).length&&e(this).attr({"aria-describedby":s})}})),t.$dots.attr("role","tablist").find("li").each((function(o){var s=n[o];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+o,"aria-controls":"slick-slide"+t.instanceUid+s,"aria-label":o+1+" of "+i,"aria-selected":null,tabindex:"-1"})})).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var o=t.currentSlide,s=o+t.options.slidesToShow;o<s;o++)t.options.focusOnChange?t.$slides.eq(o).attr({tabindex:"0"}):t.$slides.eq(o).removeAttr("tabindex");t.activateADA()},i.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},i.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},i.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},i.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},i.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},i.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},i.prototype.lazyLoad=function(){var t,i,n,o=this;function s(t){e("img[data-lazy]",t).each((function(){var t=e(this),i=e(this).attr("data-lazy"),n=e(this).attr("data-srcset"),s=e(this).attr("data-sizes")||o.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){t.animate({opacity:0},100,(function(){n&&(t.attr("srcset",n),s&&t.attr("sizes",s)),t.attr("src",i).animate({opacity:1},200,(function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),o.$slider.trigger("lazyLoaded",[o,t,i])}))},r.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,t,i])},r.src=i}))}if(!0===o.options.centerMode?!0===o.options.infinite?n=(i=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(i=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),n=o.options.slidesToShow/2+1+2+o.currentSlide):(i=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,n=Math.ceil(i+o.options.slidesToShow),!0===o.options.fade&&(i>0&&i--,n<=o.slideCount&&n++)),t=o.$slider.find(".slick-slide").slice(i,n),"anticipated"===o.options.lazyLoad)for(var r=i-1,a=n,l=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)r<0&&(r=o.slideCount-1),t=(t=t.add(l.eq(r))).add(l.eq(a)),r--,a++;s(t),o.slideCount<=o.options.slidesToShow?s(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?s(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&s(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},i.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},i.prototype.next=i.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},i.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},i.prototype.pause=i.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},i.prototype.play=i.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},i.prototype.postSlide=function(t){var i=this;i.unslicked||(i.$slider.trigger("afterChange",[i,t]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),!0===i.options.accessibility&&(i.initADA(),i.options.focusOnChange&&e(i.$slides.get(i.currentSlide)).attr("tabindex",0).focus()))},i.prototype.prev=i.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},i.prototype.preventDefault=function(e){e.preventDefault()},i.prototype.progressiveLazyLoad=function(t){t=t||1;var i,n,o,s,r,a=this,l=e("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),o=i.attr("data-srcset"),s=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){o&&(i.attr("srcset",o),s&&i.attr("sizes",s)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},r.onerror=function(){t<3?setTimeout((function(){a.progressiveLazyLoad(t+1)}),500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},r.src=n):a.$slider.trigger("allImagesLoaded",[a])},i.prototype.refresh=function(t){var i,n,o=this;n=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>n&&(o.currentSlide=n),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),i=o.currentSlide,o.destroy(!0),e.extend(o,o.initials,{currentSlide:i}),o.init(),t||o.changeSlide({data:{message:"index",index:i}},!1)},i.prototype.registerBreakpoints=function(){var t,i,n,o=this,s=o.options.responsive||null;if("array"===e.type(s)&&s.length){for(t in o.respondTo=o.options.respondTo||"window",s)if(n=o.breakpoints.length-1,s.hasOwnProperty(t)){for(i=s[t].breakpoint;n>=0;)o.breakpoints[n]&&o.breakpoints[n]===i&&o.breakpoints.splice(n,1),n--;o.breakpoints.push(i),o.breakpointSettings[i]=s[t].settings}o.breakpoints.sort((function(e,t){return o.options.mobileFirst?e-t:t-e}))}},i.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},i.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout((function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()}),50))},i.prototype.removeSlide=i.prototype.slickRemove=function(e,t,i){var n=this;if(e="boolean"==typeof e?!0===(t=e)?0:n.slideCount-1:!0===t?--e:e,n.slideCount<1||e<0||e>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},i.prototype.setCSS=function(e){var t,i,n=this,o={};!0===n.options.rtl&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",o[n.positionProp]=e,!1===n.transformsEnabled?n.$slideTrack.css(o):(o={},!1===n.cssTransitions?(o[n.animType]="translate("+t+", "+i+")",n.$slideTrack.css(o)):(o[n.animType]="translate3d("+t+", "+i+", 0px)",n.$slideTrack.css(o)))},i.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},i.prototype.setFade=function(){var t,i=this;i.$slides.each((function(n,o){t=i.slideWidth*n*-1,!0===i.options.rtl?e(o).css({position:"relative",right:t,top:0,zIndex:i.options.zIndex-2,opacity:0}):e(o).css({position:"relative",left:t,top:0,zIndex:i.options.zIndex-2,opacity:0})})),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},i.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},i.prototype.setOption=i.prototype.slickSetOption=function(){var t,i,n,o,s,r=this,a=!1;if("object"===e.type(arguments[0])?(n=arguments[0],a=arguments[1],s="multiple"):"string"===e.type(arguments[0])&&(n=arguments[0],o=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?s="responsive":void 0!==arguments[1]&&(s="single")),"single"===s)r.options[n]=o;else if("multiple"===s)e.each(n,(function(e,t){r.options[e]=t}));else if("responsive"===s)for(i in o)if("array"!==e.type(r.options.responsive))r.options.responsive=[o[i]];else{for(t=r.options.responsive.length-1;t>=0;)r.options.responsive[t].breakpoint===o[i].breakpoint&&r.options.responsive.splice(t,1),t--;r.options.responsive.push(o[i])}a&&(r.unload(),r.reinit())},i.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},i.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},i.prototype.setSlideClasses=function(e){var t,i,n,o,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(e).addClass("slick-current"),!0===s.options.centerMode){var r=s.options.slidesToShow%2==0?1:0;t=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&(e>=t&&e<=s.slideCount-1-t?s.$slides.slice(e-t+r,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=s.options.slidesToShow+e,i.slice(n-t+1+r,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):e===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=s.slideCount-s.options.slidesToShow?s.$slides.slice(e,e+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(o=s.slideCount%s.options.slidesToShow,n=!0===s.options.infinite?s.options.slidesToShow+e:e,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-e<s.options.slidesToShow?i.slice(n-(s.options.slidesToShow-o),n+o).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},i.prototype.setupInfinite=function(){var t,i,n,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(i=null,o.slideCount>o.options.slidesToShow)){for(n=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-n;t-=1)i=t-1,e(o.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<n+o.slideCount;t+=1)i=t,e(o.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each((function(){e(this).attr("id","")}))}},i.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},i.prototype.selectHandler=function(t){var i=this,n=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),o=parseInt(n.attr("data-slick-index"));o||(o=0),i.slideCount<=i.options.slidesToShow?i.slideHandler(o,!1,!0):i.slideHandler(o)},i.prototype.slideHandler=function(e,t,i){var n,o,s,r,a,l,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))if(!1===t&&c.asNavFor(e),n=e,a=c.getLeft(n),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,(function(){c.postSlide(n)})):c.postSlide(n));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,(function(){c.postSlide(n)})):c.postSlide(n));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=n<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),s=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(s),c.fadeSlide(o,(function(){c.postSlide(o)}))):c.postSlide(o),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,(function(){c.postSlide(o)})):c.postSlide(o)}},i.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},i.prototype.swipeDirection=function(){var e,t,i,n,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,i=Math.atan2(t,e),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&n>=0||n<=360&&n>=315?!1===o.options.rtl?"left":"right":n>=135&&n<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?n>=35&&n<=135?"down":"up":"vertical"},i.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},i.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},i.prototype.swipeMove=function(e){var t,i,n,o,s,r,a=this;return s=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:e.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&r>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+n*o:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+n*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},i.prototype.swipeStart=function(e){var t,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return i.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,i.dragging=!0},i.prototype.unfilterSlides=i.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},i.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},i.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},i.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},i.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},i.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,t,n=this,o=arguments[0],s=Array.prototype.slice.call(arguments,1),r=n.length;for(e=0;e<r;e++)if("object"==typeof o||void 0===o?n[e].slick=new i(n[e],o):t=n[e].slick[o].apply(n[e].slick,s),void 0!==t)return t;return n}})),$((function(){$(".products__slider").slick({prevArrow:'<button class="slider-btn slider-btn__left"><svg width="10" height="18" viewBox="0 0 10 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.21839 1L1 9L9.21839 17" /></svg></button>',nextArrow:'<button class="slider-btn slider-btn__right"><svg width="10" height="18" viewBox="0 0 10 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.78161 17L9 9L0.78161 1" /></svg> </button>',infinite:!1}),$(".questions__item-title").on("click",(function(){$(".questions__item").removeClass("questions__item--active"),$(this).parent().addClass("questions__item--active")})),$("#fullpage").fullpage({autoScrolling:!0,scrollHorizontally:!0,sectionSelector:".page-section",scrollBar:!1,scrollingSpeed:550,scrollOverflow:!0,responsiveWidth:1100,anchors:["top","products","benefits","specification","questions","contacts"],menu:"#header__nav"}),$(".menu__btn").on("click",(function(){$(".menu__btn").toggleClass("menu__btn--active"),$(".menu__list").toggleClass("menu__list--active")})),$(".menu__list-link").on("click",(function(){$(".menu__btn").removeClass("menu__btn--active"),$(".menu__list").removeClass("menu__list--active")}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
